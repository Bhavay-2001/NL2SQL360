SELECT COUNT(*) FROM "singer";
SELECT COUNT(*) FROM "singer";
SELECT "Singer_ID", "Name", "Country", "Age" FROM "singer" ORDER BY "Age" DESC
SELECT "Singer_ID", "Name", "Country", "Age" FROM "singer" ORDER BY "Age" DESC
SELECT "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male", "Average", "Minimum", "Maximum" FROM "singer" WHERE "Country" = "France" GROUP BY "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male" ORDER BY "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male" \end{code}  Comment: I'm not sure what you mean by "What is the average, minimum, and maximum age of all singers from France?"  Comment: I'm not sure what you mean by "What is the average, minimum, and maximum age of all singers from France?"  Comment: I'm not sure what you mean by "What is the average, minimum, and maximum age of all singers from France?"  Comment: I'm not sure what you mean by "What is the average, minimum
SELECT "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male", "Average", "Minimum", "Maximum" FROM "singer" WHERE "Country" = "France" GROUP BY "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male" ORDER BY "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male"
SELECT "Singer_ID", "Song_release_year" FROM "singer" WHERE "Singer_ID" = (SELECT "Singer_ID" FROM "singer_in_concert" WHERE "concert_ID" = (SELECT "concert_ID" FROM "concert" WHERE "Year" = (SELECT "Year" FROM "concert" WHERE "concert_ID" = (SELECT "concert_ID" FROM "singer_in_concert" WHERE "Singer_ID" = (SELECT "Singer_ID" FROM "singer" WHERE "Age" < 20))))))
SELECT "Singer_ID", "Song_Name", "Song_release_year" FROM "singer_in_concert" WHERE "Singer_ID" = ( SELECT MIN("Singer_ID") FROM "singer_in_concert" WHERE "Singer_ID" = ( SELECT MIN("Singer_ID") FROM "singer_in_concert" WHERE "Singer_ID" = ( SELECT MIN("Singer_ID") FROM "singer_in_concert" WHERE "Singer_ID" = ( SELECT MIN("Singer_ID") FROM "singer_in_concert" WHERE "Singer_ID" = ( SELECT MIN("Singer_ID") FROM "singer_in_concert" WHERE "Singer_ID" = ( SELECT MIN("Singer_ID") FROM "singer_in_concert" WHERE "Singer_ID" = ( SELECT MIN("Singer_ID") FROM "singer_in_concert" WHERE "Singer_
SELECT DISTINCT "Country" FROM "singer" WHERE "Is_male" = 1 AND "Age" > 20
SELECT DISTINCT "Singer_ID" FROM "singer_in_concert" WHERE "Singer_ID" > 20 AND "Is_male" = 1;
SELECT "Country", COUNT(*) FROM "singer" GROUP BY "Country" ORDER BY "Country"
SELECT COUNT(DISTINCT "Singer_ID") AS "Country_Count" FROM "singer" GROUP BY "Country" ORDER BY "Country_Count" DESC
SELECT "Singer_ID", "Name", "Song_Name", "Song_release_year" FROM "singer" WHERE "Age" > 30 AND "Is_male" = true AND "Song_Name" != '' AND "Song_release_year" != '' AND "Song_release_year" > 1990 AND "Song_release_year" < 2010 AND "Song_release_year" != '' AND "Song_release_year" != '' AND "Song_release_year" != '' AND "Song_release_year" != '' AND "Song_release_year" != '' AND "Song_release_year" != '' AND "Song_release_year" != '' AND "Song_release_year" != '' AND "Song_release_year" != '' AND "Song_release_year" != '' AND "Song_release_year" != '' AND "Song_release_year" != '' AND "Song_release_year
SELECT "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male" FROM "singer" WHERE "Age" > "Average" ORDER BY "Age" DESC
SELECT "stadium"."Location", "stadium"."Name" FROM "stadium" WHERE "stadium"."Capacity" BETWEEN 5000 AND 10000 ORDER BY "stadium"."Capacity" DESC
SELECT "stadium".* FROM "stadium" WHERE "stadium".Capacity BETWEEN 5000 AND 10000;
SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "
SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "
SELECT "stadium".* FROM "stadium" WHERE "stadium".Capacity = ( SELECT MAX("stadium".Capacity) FROM "stadium" WHERE "stadium".Capacity > 0 AND "stadium".Capacity < 100000 AND "stadium".Average > 0 AND "stadium".Average < 100000 AND "stadium".Average > 10000 AND "stadium".Average < 100000 AND "stadium".Average > 10000 AND "stadium".Average < 100000 AND "stadium".Average > 10000 AND "stadium".Average < 100000 AND "stadium".Average > 10000 AND "stadium".Average < 100000 AND "stadium".Average > 10000 AND "stadium".Average < 100000 AND "stadium".Average >
SELECT "stadium".* FROM "stadium" WHERE "stadium".Capacity = ( SELECT MAX("stadium".Capacity) FROM "stadium" WHERE "stadium".Capacity > 0 AND "stadium".Capacity < 100000 AND "stadium".Average > 0 AND "stadium".Average < 100000 AND "stadium".Average > 10000 AND "stadium".Average < 100000 AND "stadium".Average > 10000 AND "stadium".Average < 100000 AND "stadium".Average > 10000 AND "stadium".Average < 100000 AND "stadium".Average > 10000 AND "stadium".Average < 100000 AND "stadium".Average > 10000 AND "stadium".Average < 100000 AND "stadium".Average >
SELECT COUNT(*) FROM "concert" WHERE "Year" = '2014' OR "Year" = '2015';
SELECT COUNT(*) FROM "concert" WHERE "Year" = '2014' OR "Year" = '2015';
SELECT "stadium"."Location", COUNT("stadium"."Stadium_ID") FROM "stadium" GROUP BY "stadium"."Location" ORDER BY "stadium"."Location"
SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "stadium"  SELECT "stadium".* FROM "
SELECT "stadium"."Name", "stadium"."Capacity" FROM "stadium" WHERE "stadium"."Year" >= 2014 GROUP BY "stadium"."Name", "stadium"."Capacity" ORDER BY "stadium"."Capacity" DESC \end{code}  Comment: I'm not sure if I understand your question correctly. Do you want to show the stadium name and capacity with most number of concerts in year 2014 or after?  Comment: @MikeS. Yes, that is correct.  Answer: You can use `group by` and `order by` to get the stadium name and capacity with most number of concerts in year 2014 or after.  \begin{code} SELECT "stadium"."Name", "stadium"."Capacity" FROM "stadium" WHERE "stadium"."Year" >= 2014 GROUP BY "stadium"."Name", "stadium"."Capacity" ORDER BY "stadium"."Capacity" DESC \end{code}  Comment
SELECT "stadium".* FROM "stadium" WHERE "stadium".Year >= 2013 ORDER BY "stadium".Year DESC LIMIT 1
SELECT COUNT(DISTINCT concert_ID) AS "Year_with_most_concerts" FROM "concert" GROUP BY "Year" ORDER BY "Year_with_most_concerts" DESC
SELECT COUNT(DISTINCT concert_ID) AS "Year_with_most_concerts" FROM "concert" GROUP BY "Year" ORDER BY "Year_with_most_concerts" DESC
SELECT "stadium".* FROM "stadium" WHERE "stadium".* NOT IN (SELECT "stadium".* FROM "singer_in_concert")
SELECT "stadium".* FROM "stadium" WHERE "stadium".* NOT IN (SELECT "stadium".* FROM "singer_in_concert")
SELECT DISTINCT "Singer_ID" FROM "singer_in_concert" WHERE "Singer_ID" > 40 AND "Singer_ID" < 30
SELECT "stadium".* FROM "stadium" WHERE "stadium".Stadium_ID NOT IN ( SELECT "stadium".Stadium_ID FROM "stadium" INNER JOIN "singer_in_concert" ON "singer_in_concert".concert_ID = "stadium".Stadium_ID WHERE "singer_in_concert".concert_ID = 2014 ) \end{code}  Comment: I'm not sure if I understand your question correctly. Do you want to show the names of all stadiums except for stadiums that have a concert in 2014?  Comment: Yes, that is correct.  Comment: I've added an answer.  Answer: You can use a `NOT IN` clause to exclude the stadiums that have a concert in 2014.  \begin{code} SELECT "stadium".* FROM "stadium" WHERE "stadium".Stadium_ID NOT IN (     SELECT "stadium".Stadium_ID     FROM "stadium"     INNER
SELECT "stadium".* FROM "stadium" WHERE NOT EXISTS ( SELECT "stadium".* FROM "singer_in_concert" WHERE "stadium".Stadium_ID = "singer_in_concert".Stadium_ID AND "singer_in_concert".concert_ID = 2014 )
SELECT "concert_Name", "Theme" FROM "concert" ORDER BY "concert_Name"  SELECT "concert_ID", "Singer_ID" FROM "singer_in_concert" GROUP BY "concert_ID", "Singer_ID" ORDER BY "concert_ID", "Singer_ID"
SELECT concert_Name, Theme, COUNT(Singer_ID) AS singers FROM concert GROUP BY concert_Name, Theme ORDER BY concert_Name, Theme \end{code}  Comment: I'm not sure what you're asking.  What is the problem you're having?  Comment: I'm not sure what you're asking.  What is the problem you're having?  Comment: I'm not sure what you're asking.  What is the problem you're having?  Comment: I'm not sure what you're asking.  What is the problem you're having?  Comment: I'm not sure what you're asking.  What is the problem you're having?  Comment: I'm not sure what you're asking.  What is the problem you're having?  Comment: I'm not sure what you're asking.  What is the problem you're having?  Comment: I'm not sure what you're asking.  What is the problem you're having?  Comment: I'm not sure what
SELECT "Singer_ID", "Name", COUNT("concert_ID") FROM "singer_in_concert" GROUP BY "Singer_ID" ORDER BY "Name" \end{code}  Comment: I'm not sure if I understand your question correctly. Do you want to list all singers and the number of concerts they have performed?  Comment: Yes, that is correct.  Comment: I've added an answer.  Answer: You can use the following query:  \begin{code} SELECT "Singer_ID", "Name", COUNT("concert_ID") FROM "singer_in_concert" GROUP BY "Singer_ID" ORDER BY "Name" \end{code}  Comment: Thank you for your answer. I'm getting the following error:  Comment: ERROR:  column "Singer_ID" does not exist LINE 1: SELECT "Singer_ID", "Name", COUNT("concert_ID")  Comment: I've updated the answer. Please try again.  Comment: Thank you for your help. I
SELECT "Singer_ID", COUNT("concert_ID") FROM "singer_in_concert" GROUP BY "Singer_ID" ORDER BY "Singer_ID" \end{code}  Comment: I'm not sure what you mean by "names of the singers and number of concerts for each person".  Do you mean the names of the singers and the number of concerts for each singer?  Comment: @JonathanLeffler I mean the names of the singers and the number of concerts for each singer.  Comment: @JonathanLeffler I've edited the question.  Comment: @JonathanLeffler I've edited the question.  Comment: @JonathanLeffler I've edited the question.  Comment: @JonathanLeffler I've edited the question.  Comment: @JonathanLeffler I've edited the question.  Comment: @JonathanLeffler I've edited the question.  Comment: @JonathanLeffler I've edited the question.  Comment
SELECT "Singer_ID", "Name" FROM "singer_in_concert" WHERE "Year" = '2014' ORDER BY "Singer_ID" \end{code}  Comment: I'm not sure if I understand your question correctly. Do you want to list all singers in concerts in year 2014?  Comment: Yes, that is correct.  Comment: I've updated my answer.  Answer: You can use the following query:  \begin{code} SELECT "Singer_ID", "Name" FROM "singer_in_concert" WHERE "Year" = '2014' ORDER BY "Singer_ID" \end{code}  Comment: I'm getting an error: "ERROR:  column "Singer_ID" does not exist"  Comment: @user3783243 I've updated my answer.  Comment: I'm getting an error: "ERROR:  column "Year" does not exist"  Comment: @user3783243 I'
SELECT "Singer_ID" FROM "singer_in_concert" WHERE "concert_ID" = 2014
SELECT "Singer_ID", "Name", "Country" FROM "singer" WHERE "Song_Name" LIKE 'Hey%' ORDER BY "Singer_ID" \end{code}  Comment: I'm not sure what you're asking.  Do you want to know the name of the singer who has a song with "Hey" in the title?  Comment: @TimBiegeleisen yes, that's what I want to know.  Comment: @TimBiegeleisen I've edited the question to make it more clear.  Comment: @TimBiegeleisen I've edited the question to make it more clear.  Comment: @TimBiegeleisen I've edited the question to make it more clear.  Comment: @TimBiegeleisen I've edited the question to make it more clear.  Comment: @TimBiegeleisen I've edited the question to make it more clear.  Comment: @TimBiegeleisen I've edited the question to make it more clear.  Comment: @TimBiegeleisen I've edited the question to
SELECT "Singer_ID", "Name", "Country" FROM "singer" WHERE "Name" LIKE 'Hey%' AND "Country" IS NOT NULL AND "Country" <> '' AND "Country" <> 'NULL' AND "Country" <> 'NULL' AND "Country" <> 'NULL' AND "Country" <> 'NULL' AND "Country" <> 'NULL' AND "Country" <> 'NULL' AND "Country" <> 'NULL' AND "Country" <> 'NULL' AND "Country" <> 'NULL' AND "Country" <> 'NULL' AND "Country" <> 'NULL' AND "Country" <> 'NULL' AND "Country" <> 'NULL' AND "Country" <> 'NULL' AND "Country" <> 'NULL' AND "Country" <> 'NULL' AND "Country" <> 'NULL' AND "Country" <> 'NULL' AND "Country" <> 'NULL' AND "Country" <> 'NULL' AND "Country" <> 'NULL' AND "Country" <> 'NULL' AND "Country" <> 'NULL' AND "Country
SELECT "stadium"."Name", "stadium"."Location" FROM "stadium" WHERE "stadium"."Stadium_ID" IN ( SELECT "stadium_in_concert"."Stadium_ID" FROM "stadium_in_concert" WHERE "stadium_in_concert"."concert_ID" IN ( SELECT "concert"."concert_ID" FROM "concert" WHERE "concert"."Year" IN ( SELECT "concert"."Year" FROM "concert" WHERE "concert"."Year" IN ( SELECT "concert"."Year" FROM "concert" WHERE "concert"."Year" IN ( SELECT "concert"."Year" FROM "concert" WHERE "concert"."Year" IN ( SELECT "concert"."Year" FROM "concert" WHERE "concert"."Year" IN ( SELECT "concert"."Year" FROM "concert" WHERE "concert"."Year" IN ( SELECT "concert"."Year" FROM "
SELECT "stadium".* FROM "stadium" WHERE "stadium".Year = 2014 OR "stadium".Year = 2015 AND EXISTS (SELECT "stadium".* FROM "stadium" WHERE "stadium".Year = 2014 AND "stadium".Year = 2015 AND "stadium".Stadium_ID = "concert".Stadium_ID)
SELECT COUNT(*) FROM "concert" WHERE "Stadium_ID" = (SELECT "Stadium_ID" FROM "stadium" WHERE "Capacity" = (SELECT MAX("Capacity") FROM "stadium"));
SELECT COUNT(*) FROM "concert" WHERE "Stadium_ID" = (SELECT MAX("Stadium_ID") FROM "stadium");
SELECT PetID, PetType, pet_age, weight FROM Pets WHERE weight > 10
SELECT PetID, PetType, pet_age, weight FROM Pets WHERE weight > 10
SELECT PetID, PetType, pet_age, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age)                   FROM Pets                   WHERE PetType = 'dog'); \end{code}  Comment: I'm not sure what you mean by "the weight of the youngest dog".  Do you mean the weight of the youngest dog in the database?  Or the weight of the youngest dog in the world?  Comment: I mean the weight of the youngest dog in the database.  Comment: I'm not sure what you mean by "the weight of the youngest dog in the database".  Do you mean the weight of the youngest dog in the database that has a weight?  Or the weight of the youngest dog in the database that has a weight and a pet_age?  Or the weight of the youngest dog in the database that has a weight and a pet_age and a pet_type?  Or the weight of the youngest dog in the database that has a weight and a pet_age and a pet_type and a pet_id?  Comment: I mean the weight of the
SELECT PetID, PetType, pet_age, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age)                   FROM Pets                   WHERE PetType = 'dog'); \end{code}  Comment: I'm not sure what you mean by "the youngest dog weighs".  Do you mean the youngest dog in the database?  Or the youngest dog in the world?  Or the youngest dog in the universe?  Or the youngest dog in the solar system?  Or the youngest dog in the Milky Way?  Or the youngest dog in the galaxy?  Or the youngest dog in the universe?  Or the youngest dog in the multiverse?  Or the youngest dog in the multiverse?  Or the youngest dog in the multiverse?  Or the youngest dog in the multiverse?  Or the youngest dog in the multiverse?  Or the youngest dog in the multiverse?  Comment: @TimBiegeleisen I mean the youngest dog in the database.  Comment: @TimBiegeleisen I mean the youngest dog in the database
error
SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType ORDER BY PetType \end{code}  Comment: I'm not sure what you mean by "maximum weight and type for each type of pet".  Do you mean the maximum weight and type for each pet?  Comment: @JonathanLeffler: I think he means the maximum weight and type for each type of pet.  Comment: @JonathanLeffler: I think he means the maximum weight and type for each type of pet.  Comment: @JonathanLeffler: I think he means the maximum weight and type for each type of pet.  Comment: @JonathanLeffler: I think he means the maximum weight and type for each type of pet.  Comment: @JonathanLeffler: I think he means the maximum weight and type for each type of pet.  Comment: @JonathanLeffler: I think he means the maximum weight and type for each type of pet.  Comment: @JonathanLeffler: I think he means the maximum weight and type for each type of pet.
SELECT StuID, COUNT(PetID) FROM Has_Pet WHERE Age > 20 GROUP BY StuID \end{code}  Comment: I'm not sure what you mean by "the number of pets owned by students who are older than 20".  Do you mean the number of students who are older than 20?  Or the number of pets owned by students who are older than 20?  Comment: I mean the number of pets owned by students who are older than 20.  Comment: I'm not sure what you mean by "the number of pets owned by students who are older than 20".  Do you mean the number of students who are older than 20?  Or the number of pets owned by students who are older than 20?  Comment: I mean the number of pets owned by students who are older than 20.  Comment: I'm not sure what you mean by "the number of pets owned by students who are older than 20".  Do you mean the number of students who are older than 20?  Or the
SELECT COUNT(PetID) FROM Has_Pet WHERE StuID > 20 AND PetID IS NOT NULL AND PetID IN (SELECT PetID FROM Pets WHERE PetType = 'Dog' AND PetAge > 20)
SELECT count(pet_age) FROM Pets WHERE pet_age > 0 AND sex = 'F' AND pet_type = 'dog'
SELECT        PetType,        COUNT(StuID) FROM        Has_Pet WHERE        Sex = 'F' GROUP BY        PetType \end{code}  Comment: I'm not sure what you mean by "female students".  Do you mean students who are female?  Or do you mean students who have female pets?  Comment: @JonathanLeffler: I mean students who have female pets.  Comment: @JonathanLeffler: I've edited the question to make it more clear.  Comment: @JonathanLeffler: I've edited the question to make it more clear.  Comment: @JonathanLeffler: I've edited the question to make it more clear.  Comment: @JonathanLeffler: I've edited the question to make it more clear.  Comment: @JonathanLeffler: I've edited the question to make it more clear.  Comment: @JonathanLeffler: I've edited the question to make it more clear.  Comment: @Jon
SELECT DISTINCT PetType FROM Pets
SELECT DISTINCT PetType FROM Pets;
SELECT Fname FROM Student WHERE Major = 1 AND Sex = 'M' AND (PetType = 'Cat' OR PetType = 'Dog') AND Advisor = 1 AND city_code = 'Boston' ORDER BY StuID
SELECT LName, Fname, Age, Sex, Major, Advisor, city_code FROM Student WHERE Major = 1 AND Sex = 'M' AND Advisor = 1 AND city_code = 'B' AND (     SELECT PetID     FROM Has_Pet     WHERE StuID = Student.StuID     AND PetType = 'Cat' ) OR (     SELECT PetID     FROM Has_Pet     WHERE StuID = Student.StuID     AND PetType = 'Dog' )
SELECT Fname FROM Student WHERE Major = 1 AND Sex = 'F' AND EXISTS (SELECT * FROM Has_Pet WHERE StuID = Student.StuID AND PetType = 'Cat') AND EXISTS (SELECT * FROM Has_Pet WHERE StuID = Student.StuID AND PetType = 'Dog')
SELECT StuID, LName, Fname, Age, Sex, Major, Advisor, city_code FROM Student WHERE Major = 1 AND Sex = 'M' AND (     SELECT COUNT(*)     FROM Has_Pet     WHERE StuID = Student.StuID     AND PetType = 'Cat' ) > 0 AND (     SELECT COUNT(*)     FROM Has_Pet     WHERE StuID = Student.StuID     AND PetType = 'Dog' ) > 0
SELECT Major, Age FROM Student WHERE Major NOT IN (SELECT Major FROM Has_Pet WHERE PetType = 'Cat') AND Age > 18 AND Age < 25 ORDER BY Major, Age \end{code}  Comment: I'm not sure what you mean by "the major and age of students who do not have a cat pet".  Do you mean the major and age of students who have a pet that is not a cat?  Comment: @JonathanLeffler: Yes, that's what I mean.  Comment: @JonathanLeffler: I've edited the question to make it more clear.  Comment: @JonathanLeffler: I've edited the question to make it more clear.  Comment: @JonathanLeffler: I've edited the question to make it more clear.  Comment: @JonathanLeffler: I've edited the question to make it more clear.  Comment: @JonathanLeffler: I've edited the question to make it more clear.  Comment: @JonathanLeffler: I
SELECT StuID, Major, Age FROM Student WHERE Major = 1 AND NOT EXISTS (SELECT * FROM Has_Pet WHERE StuID = Student.StuID AND PetType = 'Cat')
SELECT StuID FROM Student WHERE NOT EXISTS (SELECT * FROM Has_Pet WHERE StuID = Student.StuID AND PetType = 'Cat')
SELECT StuID FROM Has_Pet WHERE PetID IS NULL
SELECT Fname, Age FROM Student WHERE Major = 1 AND Sex = 'M' AND (     SELECT COUNT(*)     FROM Has_Pet     WHERE StuID = Student.StuID     AND PetType = 'Dog'     AND PetID NOT IN (         SELECT PetID         FROM Has_Pet         WHERE StuID = Student.StuID         AND PetType = 'Cat'     ) ) > 0
SELECT LName, Fname, Age, Sex, Major, Advisor, city_code FROM Student WHERE Major = 1 AND Sex = 'M' AND Advisor = 1 AND city_code = 'B' AND NOT EXISTS (SELECT * FROM Has_Pet WHERE StuID = Student.StuID AND PetID = Pets.PetID) AND EXISTS (SELECT * FROM Has_Pet WHERE StuID = Student.StuID AND PetID = Pets.PetID) AND EXISTS (SELECT * FROM Has_Pet WHERE StuID = Student.StuID AND PetID = Pets.PetID) AND EXISTS (SELECT * FROM Has_Pet WHERE StuID = Student.StuID AND PetID = Pets.PetID) AND EXISTS (SELECT * FROM Has_Pet WHERE StuID = Student.StuID AND PetID = Pets.PetID) AND EXISTS (SELECT * FROM Has_Pet WHERE StuID = Student.StuID AND PetID = Pets.PetID) AND EXISTS (SELECT * FROM Has_Pet WHERE StuID = Student.
SELECT PetType, weight FROM Pets WHERE PetType = 'Cat' AND pet_age = (SELECT MIN(pet_age)                  FROM Pets                  WHERE PetType = 'Cat')
error
error
SELECT PetID, PetType, pet_age, weight FROM Pets WHERE pet_age > 1
SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType ORDER BY PetType \end{code}  Comment: I'm not sure what you mean by "the average and maximum age for each type of pet".  Do you mean the average and maximum age for each pet?  Comment: @JonathanLeffler: I think he means the average and maximum age for each type of pet.  Comment: @JonathanLeffler: I think he means the average and maximum age for each type of pet.  Comment: @JonathanLeffler: I think he means the average and maximum age for each type of pet.  Comment: @JonathanLeffler: I think he means the average and maximum age for each type of pet.  Comment: @JonathanLeffler: I think he means the average and maximum age for each type of pet.  Comment: @JonathanLeffler: I think he means the average and maximum age for each type of pet.  Comment: @JonathanLeffler: I think he means the average
SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType ORDER BY PetType \end{code}  Comment: I'm not sure what you mean by "average and maximum age for each pet type".  Do you mean the average and maximum age of all pets of a given type?  Comment: @JonathanLeffler: Yes, that's what I mean.  Answer: \begin{code} SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType ORDER BY PetType \end{code}  Comment: I'm not sure why this was downvoted.  It's a perfectly valid answer.  Comment: @JonathanLeffler: I'm not sure either. I'm not sure why I was downvoted either.  Comment: @JonathanLeffler: I'm not sure why I was downvoted either.  Comment: @JonathanLeffler: I'm not sure why I was downvoted either.
SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType ORDER BY PetType \end{code}  Comment: I'm not sure what you mean by "the average weight for each pet type".  Do you mean the average weight for each pet type, or the average weight for each student?  Comment: I mean the average weight for each pet type.  Comment: I'm not sure what you mean by "the average weight for each pet type".  Do you mean the average weight for each pet type, or the average weight for each student?  Comment: I mean the average weight for each pet type.  Comment: I'm not sure what you mean by "the average weight for each pet type".  Do you mean the average weight for each pet type, or the average weight for each student?  Comment: I mean the average weight for each pet type.  Comment: I'm not sure what you mean by "the average weight for each pet type".  Do you mean the average weight for each pet type, or the average weight for each student?  Comment: I mean the average weight for each pet type.
SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType ORDER BY PetType \end{code}  Comment: I'm not sure what you mean by "the average weight for each type of pet".  Do you mean the average weight of all pets of a given type?  Or the average weight of all pets?  Comment: I mean the average weight of all pets of a given type.  Comment: I'm not sure what you mean by "the average weight of all pets of a given type".  Do you mean the average weight of all pets of a given type?  Or the average weight of all pets?  Comment: I mean the average weight of all pets of a given type.  Comment: I'm not sure what you mean by "the average weight of all pets of a given type".  Do you mean the average weight of all pets of a given type?  Or the average weight of all pets?  Comment: I mean the average weight of all pets of a given type.  Comment: I'm not sure what you mean by "the average weight of all
SELECT Fname, Age FROM Student WHERE Major = 1 AND EXISTS (SELECT 1             FROM Has_Pet             WHERE StuID = Student.StuID             AND PetID = Pets.PetID) ORDER BY Fname, Age \end{code}  Comment: I'm not sure if this is the best way to do it, but it works.  Comment: @user1234567890: I'm not sure if this is the best way to do it either, but it works.  Comment: @user1234567890: I'm not sure if this is the best way to do it either, but it works.  Comment: @user1234567890: I'm not sure if this is the best way to do it either, but it works.  Comment: @user1234567890: I'm not sure if this is the best way to do it either, but it works.  Comment: @user1234567890: I'
SELECT DISTINCT LName, Fname, Age, Sex, Major, Advisor, city_code FROM Student WHERE EXISTS (SELECT * FROM Has_Pet WHERE StuID = Student.StuID) ORDER BY LName, Fname, Age, Sex, Major, Advisor, city_code
SELECT PetID FROM Has_Pet WHERE StuID = 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT PetID FROM Has_Pet WHERE StuID = 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT StuID, COUNT(PetID) AS PetCount FROM Has_Pet GROUP BY StuID
SELECT StuID, COUNT(PetID) AS PetCount FROM Has_Pet GROUP BY StuID \end{code}  Comment: I'm not sure what you mean by "list their ids instead of names".  Do you mean list the pet IDs instead of the pet names?  Comment: @TimBiegeleisen yes, I mean list the pet IDs instead of the pet names.  Comment: @TimBiegeleisen I've updated the question with the answer.  Answer: \begin{code} SELECT StuID, COUNT(PetID) AS PetCount FROM Has_Pet GROUP BY StuID \end{code}  Comment: I've updated the question with the answer.
error
SELECT StuID, LName, Fname, Sex, Major, Advisor, city_code FROM Student WHERE StuID IN (     SELECT StuID     FROM Has_Pet     GROUP BY StuID     HAVING COUNT(PetID) > 1 ) ORDER BY StuID \end{code}  Comment: I'm not sure if this is the best way to do it, but it works.  Comment: @user10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT LName FROM Student WHERE Age = 3 AND Sex = 'F' AND Major = 1 AND Advisor = 1 AND city_code = 'NY'
SELECT LName, PetType, pet_age, weight FROM Pets WHERE PetType = 'cat' AND pet_age = 3 AND StuID = (SELECT StuID               FROM Has_Pet               WHERE PetID = (SELECT PetID                               FROM Pets                               WHERE PetType = 'cat'                               AND pet_age = 3))
SELECT AVG(Age) FROM Student WHERE Major = 1 AND Has_Pet = 0;
SELECT AVG(Age) FROM Student WHERE NOT EXISTS (SELECT * FROM Has_Pet WHERE StuID = Student.StuID);
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT Continent, COUNT(Continent) AS Countries FROM countries GROUP BY Continent;
SELECT ContId, Continent, COUNT(ContId) AS Countries FROM continents GROUP BY ContId, Continent;
SELECT COUNT(*) FROM countries;
SELECT COUNT(*) FROM countries;
SELECT 	car_makers.Maker, 	car_makers.FullName, 	COUNT(DISTINCT car_names.Model) AS Models FROM 	car_makers 	INNER JOIN car_names ON car_makers.Id = car_names.MakeId GROUP BY 	car_makers.Maker, 	car_makers.FullName ORDER BY 	car_makers.Maker, 	car_makers.FullName
SELECT * FROM car_makers;
SELECT * FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data);
SELECT * FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data);
SELECT * FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data);
SELECT * FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT * FROM car_names WHERE Year = 1970;
SELECT * FROM car_names WHERE Year = 1970;
SELECT * FROM cars_data WHERE Year = 1990;
SELECT * FROM car_names WHERE Year = 1900;
SELECT DISTINCT Model FROM car_names WHERE Year > 1980;
SELECT * FROM car_names WHERE Model LIKE 'M%' AND Model LIKE 'S%' AND Model LIKE 'T%' AND Model LIKE 'V%' AND Model LIKE 'W%' AND Model LIKE 'X%' AND Model LIKE 'Y%' AND Model LIKE 'Z%'
SELECT Continent, COUNT(*) AS Count FROM car_makers GROUP BY Continent;
SELECT Continent, COUNT(Id) AS Count FROM car_makers GROUP BY Continent;
SELECT COUNT(DISTINCT CountryId) AS Count, CountryName FROM countries GROUP BY CountryName;
SELECT * FROM countries;
SELECT COUNT(DISTINCT Model), Maker FROM car_names GROUP BY Maker;
SELECT * FROM car_names;  SELECT * FROM car_makers;  SELECT * FROM model_list;  SELECT * FROM cars_data;
SELECT * FROM cars_data WHERE MakeId = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT * FROM cars_data WHERE Id = 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT COUNT(DISTINCT car_makers.Maker) FROM car_makers WHERE car_makers.Country = 1
SELECT COUNT(DISTINCT car_makers.Maker) FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryId = 2;
SELECT COUNT(DISTINCT Model) FROM car_names WHERE Country = 'USA';
SELECT COUNT(DISTINCT Model) FROM car_names WHERE Country = 'United States';
SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT * FROM cars_data WHERE Cylinders = 8 AND Year = 1974 AND Weight = (SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974)
SELECT * FROM cars_data WHERE Year = 1974 AND Cylinders = 8;
SELECT * FROM car_names;
error
SELECT * FROM countries WHERE EXISTS (SELECT * FROM car_makers WHERE car_makers.Country = countries.CountryId)
SELECT * FROM countries WHERE Continent = 1;
SELECT * FROM cars_data WHERE Horsepower > 150;
SELECT * FROM cars_data WHERE Horsepower > 150;
SELECT AVG(Weight) FROM cars_data;
SELECT AVG(Weight), AVG(Year) FROM cars_data;
SELECT * FROM countries WHERE Continent = 1 AND Countries.CountryId IN (SELECT CountryId FROM car_makers WHERE MakerId IN (SELECT MakeId FROM car_names WHERE ModelId IN (SELECT ModelId FROM cars_data WHERE MPG > 20 AND MPG < 30 AND Cylinders > 4 AND Cylinders < 6 AND Horsepower > 100 AND Horsepower < 150 AND Weight > 1000 AND Weight < 2000 AND Accelerate > 0.0 AND Accelerate < 0.1 AND Year > 2000 AND Year < 2010))));
SELECT DISTINCT CountryName FROM countries WHERE Continent = 2;
SELECT * FROM cars_data WHERE Cylinders = 3 AND Horsepower = (SELECT MAX(Horsepower) FROM cars_data WHERE Cylinders = 3);  SELECT * FROM cars_data WHERE Cylinders = 3 AND Horsepower = (SELECT MAX(Horsepower) FROM cars_data WHERE Cylinders = 3);  SELECT * FROM cars_data WHERE Cylinders = 3 AND Horsepower = (SELECT MAX(Horsepower) FROM cars_data WHERE Cylinders = 3);  SELECT * FROM cars_data WHERE Cylinders = 3 AND Horsepower = (SELECT MAX(Horsepower) FROM cars_data WHERE Cylinders = 3);  SELECT * FROM cars_data WHERE Cylinders = 3 AND Horsepower = (SELECT MAX(Horsepower) FROM cars_data WHERE Cylinders = 3);  SELECT * FROM cars_data WHERE Cylinders = 3 AND Horsepower = (SELECT MAX(Horsepower) FROM cars_data WHERE Cylinders = 3);  SELECT * FROM
SELECT * FROM cars_data WHERE Cylinders = 3 AND Horsepower = (SELECT MAX(Horsepower) FROM cars_data WHERE Cylinders = 3)
SELECT * FROM cars_data WHERE MPG = (SELECT MAX(MPG) FROM cars_data);
SELECT * FROM cars_data WHERE MPG = (SELECT MAX(MPG) FROM cars_data);
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980
SELECT AVG(edispl) FROM cars_data WHERE Model = 'Volvo'
SELECT AVG(edispl) FROM cars_data WHERE MakeId = 1;
SELECT * FROM cars_data WHERE Cylinders = 4;
SELECT MAX(Accelerate) FROM cars_data;
SELECT * FROM car_names;
SELECT * FROM car_names WHERE Model = 'BMW'
SELECT * FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM cars_data;
SELECT COUNT(*) FROM car_names WHERE Maker = 'American Motor Company'
SELECT COUNT(DISTINCT Model) FROM car_names WHERE Maker = 1;
SELECT * FROM car_names WHERE MakeId > 3;
SELECT * FROM car_makers WHERE COUNT(DISTINCT Model) > 3;
SELECT DISTINCT 	cars_data.Id, 	cars_data.MPG, 	cars_data.Cylinders, 	cars_data.Edispl, 	cars_data.Horsepower, 	cars_data.Weight, 	cars_data.Accelerate, 	cars_data.Year, 	car_makers.Maker, 	car_makers.FullName, 	car_makers.Country, 	car_names.Model, 	car_names.Make FROM cars_data INNER JOIN car_makers ON car_makers.Id = cars_data.Id INNER JOIN car_names ON car_names.MakeId = car_makers.Id WHERE car_makers.FullName = 'General Motors' AND car_makers.Country = 'United States' AND car_names.Model = 'Chevrolet' AND car_names.Make = 'Chevrolet' AND car_names.Model = 'Chevrolet' AND car_names
SELECT * FROM car_names WHERE MakeId = 1 AND Weight > 3500;
SELECT * FROM cars_data WHERE Weight BETWEEN 3000 AND 4000
SELECT * FROM cars_data WHERE Weight < 4000 AND Weight > 3000
SELECT * FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT * FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT * FROM car_names WHERE Model = 'volvo'  SELECT * FROM cars_data WHERE Model = 'volvo'  SELECT * FROM car_names WHERE Model = 'volvo'  SELECT * FROM cars_data WHERE Model = 'volvo'  SELECT * FROM car_names WHERE Model = 'volvo'  SELECT * FROM cars_data WHERE Model = 'volvo'  SELECT * FROM car_names WHERE Model = 'volvo'  SELECT * FROM cars_data WHERE Model = 'volvo'  SELECT * FROM car_names WHERE Model = 'volvo'  SELECT * FROM cars_data WHERE Model = 'volvo'  SELECT * FROM car_names WHERE Model = 'volvo'  SELECT * FROM cars_data WHERE Model = 'volvo'  SELECT * FROM car_names WHERE Model = 'volvo'  SELECT * FROM cars_data WHERE Model = 'volvo'  SELECT * FROM car_names WHERE Model = 'volvo'  SELECT * FROM cars_data WHERE Model = 'volvo'  SELECT * FROM car_names WHERE Model = 'volvo'
SELECT * FROM cars_data WHERE MPG = '10' AND Cylinders = (SELECT MIN(Cylinders) FROM cars_data WHERE MPG = '10');
SELECT * FROM cars_data WHERE Accelerate > (SELECT MAX(Accelerate) FROM cars_data);
SELECT * FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data);
SELECT COUNT(DISTINCT CountryId) FROM countries WHERE COUNT(DISTINCT CountryId) > 2;
SELECT COUNT(DISTINCT CountryId) FROM countries WHERE COUNT(DISTINCT CountryId) > 2;
SELECT * FROM cars_data WHERE Cylinders > 6;
SELECT * FROM cars_data WHERE Cylinders > 6;
SELECT * FROM cars_data WHERE Cylinders = 4;  SELECT * FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data WHERE Cylinders = 4);
SELECT * FROM cars_data WHERE Cylinders = 4;  SELECT * FROM cars_data WHERE Cylinders = 4 AND Horsepower > 200;  SELECT * FROM cars_data WHERE Cylinders = 4 AND Horsepower > 200 AND Year > 2010;  SELECT * FROM cars_data WHERE Cylinders = 4 AND Horsepower > 200 AND Year > 2010 AND Accelerate > 0.05;  SELECT * FROM cars_data WHERE Cylinders = 4 AND Horsepower > 200 AND Year > 2010 AND Accelerate > 0.05 AND Weight > 3000;  SELECT * FROM cars_data WHERE Cylinders = 4 AND Horsepower > 200 AND Year > 2010 AND Accelerate > 0.05 AND Weight > 3000 AND MPG > 20;  SELECT * FROM cars_data WHERE Cylinders = 4 AND Horsepower > 2
SELECT * FROM cars_data WHERE Horsepower > 300 AND Cylinders < 4
SELECT * FROM car_names WHERE Cylinders < 4;  SELECT * FROM car_names WHERE Cylinders < 4 AND Horsepower < 200;  SELECT * FROM car_names WHERE Cylinders < 4 AND Horsepower < 200 AND MakeId IN (SELECT MakeId FROM car_names WHERE Cylinders < 4 AND Horsepower < 200);  SELECT * FROM car_names WHERE Cylinders < 4 AND Horsepower < 200 AND MakeId IN (SELECT MakeId FROM car_names WHERE Cylinders < 4 AND Horsepower < 200);  SELECT * FROM car_names WHERE Cylinders < 4 AND Horsepower < 200 AND MakeId IN (SELECT MakeId FROM car_names WHERE Cylinders < 4 AND Horsepower < 200);  SELECT * FROM car_names WHERE Cylinders < 4 AND Horsepower < 200 AND MakeId IN (SELECT MakeId FROM car_names WHERE Cylinders < 4 AND Horsepower
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980
SELECT * FROM cars_data WHERE Cylinders = 8 AND Year < 1980
SELECT * FROM cars_data WHERE Weight < 3500 AND Make <> 'Ford Motor Company'
SELECT * FROM cars_data WHERE Weight < 3500 AND MakeId != 1;
SELECT * FROM countries WHERE CountryId NOT IN (SELECT CountryId FROM car_makers);
SELECT * FROM countries WHERE CountryId NOT IN (SELECT CountryId FROM car_makers);
SELECT * FROM car_makers WHERE COUNT(DISTINCT Country) > 2 AND COUNT(DISTINCT Model) > 3;
SELECT * FROM car_makers WHERE COUNT(DISTINCT Country) > 3;
SELECT * FROM countries WHERE COUNT(DISTINCT car_makers.Country) > 3 OR car_makers.Country = 'fiat';
SELECT * FROM countries WHERE (COUNT(DISTINCT car_makers.CountryId) > 3) OR (car_makers.CountryId = 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Country FROM airlines WHERE Airline = 1;
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'
SELECT DISTINCT airlines.Airline, airlines.Abbreviation, airports.Country, airports.CountryAbbrev FROM airlines INNER JOIN airports ON airlines.Country = airports.Country WHERE airports.Country = 'USA' ORDER BY airlines.Airline, airports.CountryAbbrev
SELECT DISTINCT Airline, Abbreviation FROM flights WHERE Country = 'USA';
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT uid, Airline, Abbreviation FROM airlines WHERE Abbreviation = 'UAL';
SELECT * FROM airlines WHERE Airline = 'UAL';
SELECT COUNT(DISTINCT airlines.Airline) FROM airlines, airports WHERE airlines.Airline = airports.Airline AND airlines.Country = 'USA';
SELECT COUNT(DISTINCT airlines.Airline) FROM airlines JOIN flights ON airlines.Airline = flights.Airline JOIN airports ON airports.AirportCode = flights.SourceAirport JOIN airports ON airports.AirportCode = flights.DestAirport WHERE airports.Country = 'USA';
SELECT * FROM airports WHERE City = 'Alton';
SELECT City, Country FROM airports WHERE AirportCode = 'ATO'
SELECT airportname FROM airports WHERE airportcode = 'AKO';
SELECT airports.AirportName FROM airports WHERE airports.AirportCode = 'AKO';
SELECT airports.AirportName FROM airports WHERE airports.City = 'Aberdeen'
SELECT * FROM airports WHERE City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABZ'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABZ'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ABZ'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ABZ'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';
SELECT COUNT(*) FROM flights WHERE Airline = 1;
SELECT COUNT(DISTINCT airlines.Airline) FROM airlines, flights, airports WHERE airlines.Airline = flights.Airline AND airlines.Airline = airports.Airline AND airlines.Airline = 13;
SELECT COUNT(*) FROM flights WHERE Airline = 1 AND DestAirport = 'ASY'
SELECT COUNT(*) FROM flights WHERE Airline = 1 AND DestAirport = 'ASY'
SELECT COUNT(DISTINCT airlines.Airline) FROM airlines, flights, airports WHERE airlines.Airline = flights.Airline AND flights.SourceAirport = airports.AirportCode AND airports.City = 'AHD'
SELECT COUNT(DISTINCT FlightNo) FROM flights WHERE Airline = 1 AND SourceAirport = 'AHD'
SELECT COUNT(*) FROM flights WHERE Airline = 1 AND DestAirport = 'ABZ'
SELECT COUNT(*) FROM flights WHERE Airline = 1 AND DestAirport = 'ABZ'
SELECT City, COUNT(*) AS ArrivingFlights FROM flights GROUP BY City ORDER BY ArrivingFlights DESC
SELECT City, COUNT(*) AS Frequency FROM flights GROUP BY City ORDER BY Frequency DESC
SELECT COUNT(DISTINCT SourceAirport) AS TotalDepartures, City FROM flights GROUP BY City ORDER BY TotalDepartures DESC
SELECT City, COUNT(*) AS Frequency FROM flights GROUP BY City;
SELECT airportcode, COUNT(*) AS flights FROM flights GROUP BY airportcode ORDER BY flights DESC
SELECT airports.AirportCode, COUNT(*) AS TotalFlights FROM flights INNER JOIN airports ON airports.AirportCode = flights.SourceAirport GROUP BY airports.AirportCode ORDER BY TotalFlights DESC
SELECT airportcode, COUNT(*) AS flights FROM flights GROUP BY airportcode ORDER BY flights DESC LIMIT 1;
SELECT airports.AirportCode, COUNT(*) AS Flights FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.AirportCode ORDER BY Flights DESC
SELECT airline, COUNT(*) AS flights FROM flights GROUP BY airline ORDER BY flights DESC
SELECT airline, COUNT(*) AS flights FROM flights GROUP BY airline ORDER BY flights DESC
SELECT airline, COUNT(*) AS flights FROM flights GROUP BY airline ORDER BY flights DESC LIMIT 1;
SELECT airline, COUNT(*) AS flights FROM flights GROUP BY airline ORDER BY flights DESC LIMIT 1
SELECT * FROM flights WHERE SourceAirport = 'AHD';
SELECT * FROM flights WHERE SourceAirport = 'AHD';
SELECT * FROM flights WHERE DestAirport = 'AHD';
SELECT * FROM flights WHERE DestAirport = 'AHD';
SELECT * FROM flights WHERE Airline IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG' AND DestAirport = 'CVO') AND Airline IN (SELECT Airline FROM flights WHERE SourceAirport = 'CVO' AND DestAirport = 'APG');
SELECT DISTINCT airlines.Airline FROM airlines, flights WHERE airlines.Airline = flights.Airline AND airlines.Airline = 1 AND flights.SourceAirport = 'APG' AND flights.DestAirport = 'CVO'
SELECT * FROM flights WHERE Airline IN (SELECT Airline FROM flights WHERE SourceAirport = 'CVO' AND DestAirport = 'APG')
SELECT DISTINCT uid FROM flights WHERE uid NOT IN (SELECT uid FROM flights WHERE SourceAirport = 'APG');
SELECT DISTINCT uid FROM airlines WHERE COUNT(*) >= 10;
SELECT DISTINCT uid FROM flights WHERE COUNT(*) >= 10;
SELECT * FROM flights WHERE airline < 200;
SELECT DISTINCT uid FROM flights WHERE COUNT(*) < 200;
SELECT FlightNo FROM flights WHERE Airline = 1;
SELECT FlightNo FROM flights WHERE Airline = 1;
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'
SELECT FlightNo FROM flights WHERE DestAirport = 'APG'
SELECT FlightNo FROM flights WHERE DestAirport = 'APG'
SELECT FlightNo FROM flights WHERE SourceAirport = 'Aberdeen'
SELECT FlightNo FROM flights WHERE SourceAirport = 'ABZ'
SELECT FlightNo FROM flights WHERE SourceAirport = 'ABZ' AND DestAirport = 'ABZ';
SELECT FlightNo FROM flights WHERE DestAirport = 'ABZ'
SELECT COUNT(*) FROM flights WHERE (AirportCode = 'ABZ' OR AirportCode = 'ABI');
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABZ' OR DestAirport = 'ABZ'; SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABI' OR DestAirport = 'ABI';
SELECT DISTINCT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN ( 	SELECT airports.AirportCode 	FROM airports 	INNER JOIN flights 	ON airports.AirportCode = flights.SourceAirport 	INNER JOIN airlines 	ON airports.CountryAbbrev = airlines.Abbreviation 	WHERE airports.CountryAbbrev = 'US' )
SELECT * FROM flights WHERE NOT EXISTS (SELECT * FROM airports WHERE airports.AirportCode = flights.SourceAirport)
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT * FROM employee ORDER BY Age ASC;
SELECT "Employee_ID", "Name", "Age" FROM "employee" ORDER BY "Age" ASC;
SELECT "Employee_ID", "City" FROM "employee" GROUP BY "Employee_ID", "City" ORDER BY "Employee_ID", "City"
SELECT "City" AS "City", COUNT(*) AS "Number_of_Employees" FROM "employee" GROUP BY "City" ORDER BY "Number_of_Employees" DESC
SELECT DISTINCT "City" FROM "employee" WHERE "Age" < 30
SELECT DISTINCT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1
SELECT DISTINCT "Shop_ID", "Location" FROM "shop"
SELECT DISTINCT "Shop_ID", "Location" FROM "shop"
SELECT "Shop_ID", "Name", "Location", "District", "Number_products", "Manager_name" FROM "shop" WHERE "Number_products" = ( SELECT MAX("Number_products") FROM "shop" )  SELECT "Shop_ID", "Name", "Location", "District", "Number_products", "Manager_name" FROM "shop" WHERE "Number_products" = ( SELECT MAX("Number_products") FROM "shop" )  SELECT "Shop_ID", "Name", "Location", "District", "Number_products", "Manager_name" FROM "shop" WHERE "Number_products" = ( SELECT MAX("Number_products") FROM "shop" )  SELECT "Shop_ID", "Name", "Location", "District", "Number_products", "Manager_name" FROM "shop" WHERE "Number_products" = ( SELECT MAX("Number_products") FROM "shop" )  SELECT "Shop_ID", "Name", "Location", "District", "Number_products", "
SELECT * FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);  SELECT * FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);  SELECT * FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);  SELECT * FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);  SELECT * FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);  SELECT * FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);  SELECT * FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);  SELECT * FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);  SELECT * FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);  SELECT * FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);  SELECT * FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);  SELECT * FROM shop WHERE Number_products = (SELECT MAX(
SELECT MIN(Number_products) AS Minimum_products, MAX(Number_products) AS Maximum_products FROM shop \end{code}  Comment: I'm not sure what you're asking.  You want to find the minimum and maximum number of products of all stores?  Comment: Yes, I want to find the minimum and maximum number of products of all stores.  Comment: I've added an answer.  Please let me know if you have any questions.  Answer: You can use the `GROUP BY` clause to find the minimum and maximum number of products of all stores.  \begin{code} SELECT MIN(Number_products) AS Minimum_products, MAX(Number_products) AS Maximum_products FROM shop GROUP BY shop.Shop_ID \end{code}  Comment: I'm getting the following error:  Comment: I'm getting the following error:  Comment: I'm getting the following error:  Comment: I'm getting the following error:  Comment: I'm getting the following error:  Comment: I'm getting
SELECT     MIN(Number_products) AS Minimum_products,     MAX(Number_products) AS Maximum_products FROM     shop \end{code}  Comment: I'm not sure what you mean by "minimum and maximum number of products across all the shops".  Do you mean the minimum and maximum number of products in any shop?  Or do you mean the minimum and maximum number of products in all shops?  Comment: @TimBiegeleisen I mean the minimum and maximum number of products in all shops.  Comment: @TimBiegeleisen I've updated the question to include the schema.  Comment: @TimBiegeleisen I've updated the question to include the schema.  Comment: @TimBiegeleisen I've updated the question to include the schema.  Comment: @TimBiegeleisen I've updated the question to include the schema.  Comment: @TimBiegeleisen I've updated the question to include the schema.  Comment: @TimBiegeleisen I've updated the question to include the schema.  Comment: @Tim
SELECT "Shop_ID", "Name", "Location", "District" FROM "Shop" ORDER BY "Number_products" DESC
SELECT "Shop_ID", "Name", "Location", "District" FROM "Shop" ORDER BY "Number_products" DESC
SELECT "Shop_ID", "Name" FROM "shop" WHERE "Number_products" > (SELECT AVG("Number_products") FROM "shop")
SELECT Shop_ID, Name, Number_products, AVG(Number_products) AS Average_number_products FROM Shop GROUP BY Shop_ID, Name, Number_products ORDER BY Average_number_products DESC LIMIT 10 \end{code}  Comment: I'm not sure what you mean by "which shops' number products is above the average".  Do you mean which shops have more than the average number of products?  Comment: @JonathanLeffler Yes, that's what I mean.  Comment: @JonathanLeffler I've edited the question to make it more clear.  Comment: @JonathanLeffler I've edited the question to make it more clear.  Comment: @JonathanLeffler I've edited the question to make it more clear.  Comment: @JonathanLeffler I've edited the question to make it more clear.  Comment: @JonathanLeffler I've edited the question to make it more clear.  Comment: @JonathanLeffler I've edited
SELECT "Employee_ID" FROM "evaluation" GROUP BY "Employee_ID" HAVING COUNT(*) = (SELECT COUNT(*) FROM "evaluation") ORDER BY COUNT(*) DESC LIMIT 1 \end{code}  Comment: I'm not sure what you mean by "the name of employee who was awarded the most times in the evaluation".  Do you mean the employee who has the most evaluations?  Comment: @JonathanLeffler yes, that's what I mean.  Comment: @JonathanLeffler I've updated the question.  Comment: @JonathanLeffler I've updated the question.  Comment: @JonathanLeffler I've updated the question.  Comment: @JonathanLeffler I've updated the question.  Comment: @JonathanLeffler I've updated the question.  Comment: @JonathanLeffler I've updated the question.  Comment: @JonathanLeffler I've updated the question.  Comment: @JonathanLeffler I've updated
SELECT employee_id, name, COUNT(*) AS awards FROM evaluation GROUP BY employee_id ORDER BY awards DESC LIMIT 1; \end{code}  Comment: I'm not sure what you mean by "which employee received the most awards in evaluations".  Do you mean the employee with the most awards?  Or the employee with the most awards in a given year?  Comment: @JonathanLeffler I mean the employee with the most awards in a given year.  Comment: @JonathanLeffler I've updated the question.  Comment: @JonathanLeffler I've updated the question.  Comment: @JonathanLeffler I've updated the question.  Comment: @JonathanLeffler I've updated the question.  Comment: @JonathanLeffler I've updated the question.  Comment: @JonathanLeffler I've updated the question.  Comment: @JonathanLeffler I've updated the question.  Comment: @JonathanLeffler I've updated the question.
SELECT * FROM employee WHERE bonus > (SELECT MAX(bonus) FROM evaluation)
SELECT employee_id, name, bonus FROM evaluation WHERE bonus = (SELECT MAX(bonus) FROM evaluation) ORDER BY bonus DESC LIMIT 1 \end{code}  Comment: I'm not sure what you mean by "which employee received the biggest bonus?"  Do you mean the employee with the highest bonus?  Comment: @JonathanLeffler yes, I mean the employee with the highest bonus.  Comment: @JonathanLeffler I've updated the question.  Comment: @JonathanLeffler I've updated the question.  Comment: @JonathanLeffler I've updated the question.  Comment: @JonathanLeffler I've updated the question.  Comment: @JonathanLeffler I've updated the question.  Comment: @JonathanLeffler I've updated the question.  Comment: @JonathanLeffler I've updated the question.  Comment: @JonathanLeffler I've updated the question.  Comment: @JonathanLeffler I've updated the
SELECT DISTINCT "Employee_ID" FROM "evaluation" WHERE "Employee_ID" NOT IN (SELECT "Employee_ID" FROM "evaluation" WHERE "Year_awarded" IS NOT NULL)
SELECT * FROM employee WHERE evaluation IS NULL;
SELECT * FROM hiring ORDER BY COUNT(*) DESC
SELECT * FROM "hiring" GROUP BY "Shop_ID" ORDER BY COUNT(*) DESC
SELECT DISTINCT "Shop_ID" FROM "hiring" WHERE "Employee_ID" IS NULL;
SELECT * FROM "shop" WHERE "Shop_ID" NOT IN (SELECT "Shop_ID" FROM "hiring");
SELECT "Shop_ID", COUNT("Employee_ID") AS "Number_of_Employees" FROM "hiring" GROUP BY "Shop_ID" ORDER BY "Number_of_Employees" DESC
SELECT "Shop_ID", COUNT("Employee_ID") AS "Number_of_employees", "Name" FROM "hiring" GROUP BY "Shop_ID"  SELECT "Shop_ID", "Name" FROM "hiring" GROUP BY "Shop_ID"  SELECT "Shop_ID", "Name" FROM "hiring" GROUP BY "Shop_ID"  SELECT "Shop_ID", "Name" FROM "hiring" GROUP BY "Shop_ID"  SELECT "Shop_ID", "Name" FROM "hiring" GROUP BY "Shop_ID"  SELECT "Shop_ID", "Name" FROM "hiring" GROUP BY "Shop_ID"  SELECT "Shop_ID", "Name" FROM "hiring" GROUP BY "Shop_ID"  SELECT "Shop_ID", "Name" FROM "hiring" GROUP BY "Shop_ID"  SELECT "Shop_ID", "Name" FROM "hiring" GROUP BY "Shop_ID"  SELECT "Shop_ID", "Name" FROM "hiring
SELECT SUM(bonus) FROM evaluation;
SELECT SUM(bonus) FROM evaluation;
SELECT * FROM hiring;
error
SELECT DISTINCT "District" FROM "shop" WHERE "Number_products" < 3000 AND "Number_products" > 10000
SELECT DISTINCT "District" FROM "shop" WHERE "Number_products" < 3000 AND "Number_products" > 10000
SELECT COUNT(*) FROM shop;
SELECT DISTINCT "Shop_ID" FROM "shop"
SELECT COUNT(*) FROM Documents;
SELECT COUNT(*) FROM Documents
SELECT Document_ID, Document_Name, Document_Description FROM Documents
SELECT Document_ID, Document_Name, Document_Description FROM Documents
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE 'w%'
SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Name LIKE '%w%' AND Documents.Template_ID IN ( SELECT Template_ID FROM Templates WHERE Templates.Template_Type_Code = 'W' )
SELECT * FROM Documents WHERE Document_Name = 'Robbin CV'
SELECT Document_ID, Template_ID, Template_Description FROM Documents WHERE Document_Name = 'Robbin CV';
SELECT COUNT(DISTINCT Template_ID) AS Total_Templates FROM Documents
SELECT COUNT(DISTINCT Template_ID) AS Template_Count FROM Documents GROUP BY Template_ID
SELECT COUNT(DISTINCT Template_ID) FROM Templates WHERE Template_Type_Code = 'PPT'
SELECT COUNT(DISTINCT Template_Type_Code) FROM Templates WHERE Template_Type_Code = 'PPT'
SELECT Template_ID, COUNT(Template_ID) AS Number_Of_Documents FROM Templates GROUP BY Template_ID ORDER BY Template_ID
SELECT Template_ID, COUNT(*) AS Count FROM Documents GROUP BY Template_ID ORDER BY Template_ID \end{code}  Comment: I'm not sure what you mean by "all different template ids used for documents".  Do you mean the number of times each template was used?  Comment: Yes, that's what I mean.  Answer: You can use the following query:  \begin{code} SELECT Template_ID, COUNT(*) AS Count FROM Documents GROUP BY Template_ID ORDER BY Template_ID \end{code}  Comment: I'm getting an error: "Column 'Documents.Template_ID' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause."  Comment: @user3722249 - I've updated the query.  You need to add the `GROUP BY` clause.  Comment: I'm getting an error: "Column 'Documents.Template_ID' is invalid in the HAVING clause because it is not contained in either an aggregate function or the GROUP BY clause."  Comment: @user3
SELECT Template_ID, Template_Type_Code FROM Templates GROUP BY Template_ID, Template_Type_Code ORDER BY COUNT(*) DESC \end{code}  Comment: I'm not sure what you mean by "the id and type code for the template used by the most documents".  Do you mean the template with the most documents?  Or the template with the most different documents?  Or the template with the most different documents that have the most documents?  Comment: I mean the template with the most documents.  Comment: I'm not sure what you mean by "the most documents".  Do you mean the template with the most different documents?  Or the template with the most different documents that have the most documents?  Comment: I mean the template with the most different documents.  Comment: I'm not sure what you mean by "the most different documents".  Do you mean the template with the most different documents that have the most documents?  Comment: I mean the template with the most different documents that have the most documents.  Comment: I'm not sure what you mean by "the most documents".  Do you mean the template with the
SELECT Template_ID, Template_Type_Code FROM Templates GROUP BY Template_ID, Template_Type_Code HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Templates) \end{code}  Comment: I'm not sure if this is the best way to do it, but I'm getting the following error:  Comment: @user3725099: I've updated the answer to include the error message.  Comment: @user3725099: I've updated the answer to include the error message.  Comment: @user3725099: I've updated the answer to include the error message.  Comment: @user3725099: I've updated the answer to include the error message.  Comment: @user3725099: I've updated the answer to include the error message.  Comment: @user3725099: I've updated the answer to include the error message.  Comment: @user3725099: I've updated the answer to
SELECT Template_ID FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document
SELECT Template_ID FROM Templates GROUP BY Template_ID HAVING COUNT(DISTINCT Document_ID) > 1
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)
SELECT COUNT(*) FROM Templates
SELECT COUNT(*) FROM Templates
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates
error
SELECT DISTINCT Template_Type_Code FROM Templates
SELECT * FROM Ref_Template_Types;
SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'
SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'
SELECT COUNT(Template_Type_Code) FROM Templates WHERE Template_Type_Code = 'CV'
SELECT COUNT(Template_Type_Code) AS 'Number of CV Templates' FROM Templates WHERE Template_Type_Code = 'CV'
SELECT * FROM Templates WHERE Version_Number > 5 AND Template_Type_Code = '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT Template_ID, Template_Type_Code, Version_Number FROM Templates WHERE Version_Number > 5 ORDER BY Template_ID, Version_Number \end{code}  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're
SELECT Template_Type_Code, COUNT(*) AS Template_Count FROM Ref_Template_Types GROUP BY Template_Type_Code
SELECT Template_Type_Code, COUNT(*) AS Template_Count FROM Templates GROUP BY Template_Type_Code ORDER BY Template_Type_Code
SELECT Template_Type_Code, COUNT(*) AS Template_Count FROM Templates GROUP BY Template_Type_Code ORDER BY Template_Type_Code \end{code}  Comment: I'm not sure what you mean by "most number of templates".  Do you mean the template type with the most templates in the database?  Or the template type with the most templates in the database that are not null?  Comment: @JonathanLeffler I mean the template type with the most templates in the database.  Comment: @JonathanLeffler I've updated the question with the answer.  Answer: \begin{code} SELECT Template_Type_Code, COUNT(*) AS Template_Count FROM Templates GROUP BY Template_Type_Code ORDER BY Template_Type_Code \end{code}  Comment: I've updated the question with the answer.
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) = (SELECT COUNT(*) FROM Templates) \end{code}  Comment: I'm not sure I understand the question.  What do you mean by "the type code of the template type that the most templates belong to"?  Comment: I'm not sure I understand the question either.  What do you mean by "the type code of the template type that the most templates belong to"?  Comment: I'm not sure I understand the question either.  What do you mean by "the type code of the template type that the most templates belong to"?  Comment: I'm not sure I understand the question either.  What do you mean by "the type code of the template type that the most templates belong to"?  Comment: I'm not sure I understand the question either.  What do you mean by "the type code of the template type that the most templates belong to"?  Comment: I'm not sure I understand the question either.  What do you mean by "the type code of the template type that the most templates belong to"?
SELECT Template_Type_Code, COUNT(*) AS Template_Count FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3 ORDER BY Template_Type_Code \end{code}  Comment: I'm not sure what you mean by "show all template type codes with less than three templates".  Do you mean show all template type codes that have less than three templates?  Or do you mean show all template type codes that have less than three templates *and* have a count of less than three?  Comment: @JonathanLeffler I mean show all template type codes that have less than three templates.  Comment: @JonathanLeffler I've updated the question to make it clearer.  Comment: @JonathanLeffler I've updated the question to make it clearer.  Comment: @JonathanLeffler I've updated the question to make it clearer.  Comment: @JonathanLeffler I've updated the question to make it clearer.  Comment: @JonathanLeffler I've updated the question to make it clearer.  Comment: @
SELECT Template_Type_Code FROM Ref_Template_Types GROUP BY Template_Type_Code HAVING COUNT(Template_Type_Code) < 3
SELECT * FROM Templates WHERE Template_Type_Code = '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT Template_Type_Code, MIN(Version_Number) AS Version_Number FROM Templates GROUP BY Template_Type_Code \end{code}  Comment: I'm not sure what you're asking.  Are you asking how to get the lowest version number for a given template type?  Comment: Yes, I am asking how to get the lowest version number for a given template type.  Comment: I've added an answer.  Answer: \begin{code} SELECT Template_Type_Code, MIN(Version_Number) AS Version_Number FROM Templates GROUP BY Template_Type_Code \end{code}  Comment: I'm getting an error: "Column 'Templates.Template_Type_Code' is invalid in the HAVING clause because it is not contained in either an aggregate function or the GROUP BY clause."  Comment: @user1432247 - I've updated the answer.  You need to add the `Template_Type_Code` to the `GROUP BY` clause.  Comment: I'm getting an error: "Column 'Templates.Template_Type
SELECT Template_Type_Code FROM Templates WHERE Template_ID = (SELECT Template_ID FROM Documents WHERE Document_Name = 'Data base');
SELECT Template_Type_Code FROM Templates WHERE Template_ID = (SELECT Template_ID FROM Documents WHERE Document_Name = 'Data base'); \end{code}  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the table structure?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the table structure?  Comment: I'm asking how to write the query.  Comment: I've added the query.  I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the table structure?  Comment: I'm asking how to write the query.  Comment: I've added the query.  I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the table structure?  Comment: I'm asking how to write the query
SELECT Document_Name FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'BK')
SELECT Document_Name FROM Documents WHERE Template_ID = (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'BK');
SELECT Template_Type_Code, COUNT(Template_ID) AS Number_Of_Documents FROM Templates GROUP BY Template_Type_Code ORDER BY Template_Type_Code \end{code}  Comment: I'm not sure what you mean by "show all template type codes and the number of documents using each type".  Do you mean show all template type codes and the number of documents using each type?  Comment: @JonathanLeffler - yes, that's what I mean.  Comment: @JonathanLeffler - I've updated the question to include the schema.  Comment: @JonathanLeffler - I've updated the question to include the schema.  Comment: @JonathanLeffler - I've updated the question to include the schema.  Comment: @JonathanLeffler - I've updated the question to include the schema.  Comment: @JonathanLeffler - I've updated the question to include the schema.  Comment: @JonathanLeffler - I've updated the question to include the schema.  Comment: @J
SELECT Template_Type_Code, COUNT(*) AS Documents_Using_Template FROM Templates GROUP BY Template_Type_Code ORDER BY Template_Type_Code \end{code}  Comment: I'm not sure what you mean by "template type codes".  Do you mean the values in the `Template_Type_Code` column?  Comment: Yes, I mean the values in the Template_Type_Code column.  Comment: I'm not sure what you mean by "how many documents use each type".  Do you mean the number of rows in the `Templates` table?  Comment: Yes, I mean the number of rows in the Templates table.  Comment: I've updated my answer to show how to do this.  Answer: \begin{code} SELECT Template_Type_Code, COUNT(*) AS Documents_Using_Template FROM Templates GROUP BY Template_Type_Code ORDER BY Template_Type_Code \end{code}  This will give you the number of documents using each template type.  Comment: Thank you for your answer. I'm getting the following error:
SELECT COUNT(Template_Type_Code) AS Template_Type_Code_Count, Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Template_Type_Code_Count DESC
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) = (SELECT COUNT(*) FROM Documents) ORDER BY COUNT(*) DESC \end{code}  Comment: I'm not sure if this is the best way to do it, but I'm getting the following error:  Comment: @user100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN ( SELECT Template_Type_Code FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID )
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates)
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT DISTINCT Template_Type_Description FROM Templates
SELECT DISTINCT Template_Type_Description FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Documents WHERE Document_ID = 1) \end{code}  Comment: I'm not sure what you're asking.  Are you asking how to get the description of a template that has been used in a document?  Comment: Yes, I am asking how to get the description of a template that has been used in a document.  Comment: I've added an answer.  I'm not sure if this is what you're looking for, but it should get you started.  Answer: \begin{code} SELECT DISTINCT Template_Type_Description FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Documents WHERE Document_ID = 1) \end{code}  Comment: I'm getting an error: "Column 'Templates.Template_Type_Code' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause."  Comment: @user1432249 - I'm not sure what you
SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'Presentation'
SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'Presentation'
SELECT COUNT(Paragraph_ID) FROM Paragraphs
SELECT COUNT(*) FROM Paragraphs
SELECT COUNT(Paragraph_ID) FROM Documents WHERE Document_Name = 'Summer Show'
SELECT COUNT(Paragraph_ID) FROM Paragraphs WHERE Document_ID = 1;
SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea '
SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea '
SELECT Paragraph_ID, Paragraph_Text FROM Documents WHERE Document_Name = 'Welcome to NY'
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = 1;
SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = 1
SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = 1;
SELECT Document_ID, COUNT(Paragraph_ID) AS Paragraph_Count FROM Documents GROUP BY Document_ID ORDER BY Document_ID
SELECT DISTINCT Document_ID, COUNT(Paragraph_ID) FROM Documents GROUP BY Document_ID ORDER BY Document_ID \end{code}  Comment: I'm not sure if I understand your question correctly. Do you want to get the number of paragraphs for each document?  Comment: Yes, that is correct.  Comment: I've updated my answer.  Answer: You can use the following query:  \begin{code} SELECT DISTINCT Document_ID, COUNT(Paragraph_ID) FROM Documents GROUP BY Document_ID ORDER BY Document_ID \end{code}  Comment: I'm getting an error: "Column 'Documents.Document_ID' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause."  Comment: @user3788222 I've updated my answer.  Comment: I'm getting an error: "Column 'Documents.Document_ID' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause."  Comment: @user3
SELECT Document_ID, Document_Name, COUNT(Paragraph_ID) AS Paragraph_Count FROM Documents GROUP BY Document_ID, Document_Name ORDER BY Document_ID, Document_Name \end{code}  Comment: I'm not sure what you mean by "show all document ids, names and the number of paragraphs in each document".  Do you mean show all the rows in the table?  If so, you can just use `SELECT * FROM Documents`.  If you mean show the document id, name and paragraph count for each document, then you need to use `GROUP BY` and `COUNT`.  Comment: I'm not sure what you mean by "show all document ids, names and the number of paragraphs in each document". Do you mean show all the rows in the table? If so, you can just use SELECT * FROM Documents. If you mean show the document id, name and paragraph count for each document, then you need to use GROUP BY and COUNT.  Comment: @JonathanLeffler I'm not sure what you mean by "show all document ids, names and the number of paragraphs in each document".
SELECT Document_ID, Document_Name, COUNT(Paragraph_ID) AS Paragraph_Count FROM Documents GROUP BY Document_ID ORDER BY Document_ID  SELECT Document_ID, Document_Name, COUNT(Paragraph_ID) AS Paragraph_Count FROM Documents GROUP BY Document_ID ORDER BY Document_ID  SELECT Document_ID, Document_Name, COUNT(Paragraph_ID) AS Paragraph_Count FROM Documents GROUP BY Document_ID ORDER BY Document_ID  SELECT Document_ID, Document_Name, COUNT(Paragraph_ID) AS Paragraph_Count FROM Documents GROUP BY Document_ID ORDER BY Document_ID  SELECT Document_ID, Document_Name, COUNT(Paragraph_ID) AS Paragraph_Count FROM Documents GROUP BY Document_ID ORDER BY Document_ID  SELECT Document_ID, Document_Name, COUNT(Paragraph_ID) AS Paragraph_Count FROM Documents GROUP BY Document_ID ORDER BY Document_ID  SELECT Document_ID, Document_Name, COUNT(Paragraph_ID) AS Paragraph_Count
SELECT Document_ID FROM Documents WHERE Count(Paragraph_ID) > 1
SELECT Document_ID FROM Documents WHERE Count(Paragraph_ID) > 1
SELECT Document_ID, Document_Name FROM Documents GROUP BY Document_ID, Document_Name ORDER BY COUNT(Paragraph_ID) DESC
SELECT Document_ID, Document_Name FROM Documents ORDER BY COUNT(Paragraph_ID) DESC LIMIT 1;
SELECT Document_ID FROM Documents WHERE COUNT(Paragraph_ID) = 0;
SELECT Document_ID FROM Documents WHERE COUNT(Paragraph_ID) = (SELECT COUNT(Paragraph_ID) FROM Paragraphs WHERE Document_ID = Documents.Document_ID) \end{code}  Comment: I'm not sure what you mean by "the id of the document with the fewest paragraphs".  Do you mean the document with the fewest paragraphs in the table?  Or the document with the fewest paragraphs in the database?  Comment: I mean the document with the fewest paragraphs in the database.  Comment: I'm not sure how to do that.  I'm not sure if it's possible.  I'm not sure if it's even a good idea.  I'm not sure if it's even a good question.  I'm not sure if I'm even answering the question.  I'm not sure if I'm even answering the question correctly.  I'm not sure if I'm even answering the question at all.  I'm not sure if I'm even answering the question.  I'm not sure if I'm even answering the question.
SELECT * FROM Documents WHERE Document_ID = 1  SELECT * FROM Paragraphs WHERE Paragraph_ID = 1  SELECT * FROM Paragraphs WHERE Paragraph_ID = 2  SELECT * FROM Paragraphs WHERE Paragraph_ID = 3  SELECT * FROM Paragraphs WHERE Paragraph_ID = 4  SELECT * FROM Paragraphs WHERE Paragraph_ID = 5  SELECT * FROM Paragraphs WHERE Paragraph_ID = 6  SELECT * FROM Paragraphs WHERE Paragraph_ID = 7  SELECT * FROM Paragraphs WHERE Paragraph_ID = 8  SELECT * FROM Paragraphs WHERE Paragraph_ID = 9  SELECT * FROM Paragraphs WHERE Paragraph_ID = 10  SELECT * FROM Paragraphs WHERE Paragraph_ID = 11  SELECT * FROM Paragraphs WHERE Paragraph_ID = 12  SELECT * FROM Paragraphs WHERE Paragraph_ID = 13  SELECT * FROM Paragraphs WHERE Paragraph_ID = 14  SELECT * FROM Paragraphs WHERE Paragraph_ID =
SELECT Document_ID FROM Documents WHERE COUNT(Paragraph_ID) BETWEEN 1 AND 2
SELECT Document_ID FROM Documents WHERE Paragraph_Text = 'Brazil' AND Paragraph_Text = 'Ireland';
SELECT Document_ID FROM Documents WHERE Paragraph_Text LIKE '%Brazil%' OR Paragraph_Text LIKE '%Ireland%'
SELECT COUNT(*) FROM `teacher`;
SELECT COUNT(*) FROM `teacher`;
SELECT * FROM "teacher" ORDER BY "Age" ASC;
SELECT * FROM "teacher" ORDER BY "Age" ASC;
SELECT "Teacher_ID", "Name", "Age", "Hometown" FROM "teacher" WHERE "Teacher_ID" IN ( SELECT "Teacher_ID" FROM "course_arrange" WHERE "Course_ID" = 1 )
SELECT "Teacher_ID", "Name", "Age", "Hometown" FROM "teacher" WHERE "Teacher_ID" IN ( SELECT "Teacher_ID" FROM "course_arrange" GROUP BY "Teacher_ID" HAVING COUNT(*) > 1 ) ORDER BY "Teacher_ID"
SELECT * FROM `teacher` WHERE `Hometown` != 'Little Lever Urban District'
SELECT * FROM `course_arrange` WHERE `Teacher_ID` NOT IN (SELECT `Teacher_ID` FROM `course_arrange` WHERE `Hometown` = 'Little Lever Urban District');
SELECT * FROM "teacher" WHERE "Age" = 32 OR "Age" = 33;
SELECT * FROM "teacher" WHERE "Age" = 32 OR "Age" = 33;
SELECT "Teacher_ID", "Name", "Age", "Hometown" FROM "teacher" WHERE "Age" < 30 ORDER BY "Age" ASC
SELECT * FROM "course_arrange" WHERE "Teacher_ID" = (SELECT MIN("Teacher_ID") FROM "course_arrange"); \end{code}  Comment: I'm not sure what you mean by "youngest teacher from".  Do you mean the teacher with the lowest age?  Comment: @JonathanLeffler: Yes, that's what I mean.  Comment: @JonathanLeffler: I've updated the question.  Comment: @JonathanLeffler: I've updated the question.  Comment: @JonathanLeffler: I've updated the question.  Comment: @JonathanLeffler: I've updated the question.  Comment: @JonathanLeffler: I've updated the question.  Comment: @JonathanLeffler: I've updated the question.  Comment: @JonathanLeffler: I've updated the question.  Comment: @JonathanLeffler: I've updated the question.  Comment: @JonathanLeff
SELECT "Teacher_ID", "Hometown" FROM "teacher" GROUP BY "Teacher_ID", "Hometown" ORDER BY "Hometown"
SELECT "Teacher_ID", COUNT(*) FROM "course_arrange" GROUP BY "Teacher_ID" HAVING COUNT(*) > 1 ORDER BY "Teacher_ID" ASC \end{code}  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking
SELECT DISTINCT "Teacher_ID", "Hometown" FROM "teacher" WHERE "Hometown" = 'New York' ORDER BY "Teacher_ID"
SELECT "Teacher_ID", "Hometown" FROM "teacher" GROUP BY "Teacher_ID" ORDER BY COUNT(*) DESC
SELECT DISTINCT "Teacher_ID", "Hometown" FROM "teacher" WHERE EXISTS (SELECT "Teacher_ID" FROM "course_arrange" WHERE "Teacher_ID" = "Teacher_ID" AND "Grade" = 1)
SELECT DISTINCT hometown FROM teacher;
SELECT "Teacher_ID", "Name" FROM "teacher" INNER JOIN "course_arrange" ON "Teacher_ID" = "Course_ID" INNER JOIN "course" ON "Course_ID" = "Course_ID" ORDER BY "Teacher_ID"
SELECT "Teacher_ID", "Name" FROM "teacher"  SELECT "Course_ID", "Course" FROM "course"  SELECT "Course_ID", "Teacher_ID", "Grade" FROM "course_arrange" \end{code}  Comment: I'm not sure what you're asking.  What is the name of each teacher and what course they teach?  Comment: I'm not sure what you're asking.  What is the name of each teacher and what course they teach?  Comment: I'm not sure what you're asking.  What is the name of each teacher and what course they teach?  Comment: I'm not sure what you're asking.  What is the name of each teacher and what course they teach?  Comment: I'm not sure what you're asking.  What is the name of each teacher and what course they teach?  Comment: I'm not sure what you're asking.  What is the name of each teacher and what course they teach?  Comment: I'm not sure what you're asking.
SELECT "Teacher_ID", "Name" FROM "teacher" ORDER BY "Name" ASC  SELECT "Course_ID", "Name" FROM "course" ORDER BY "Name" ASC  SELECT "Course_ID", "Teacher_ID", "Grade" FROM "course_arrange" ORDER BY "Teacher_ID" ASC, "Grade" ASC \end{code}  Comment: I'm not sure what you're asking.  Can you clarify?  Comment: I'm not sure what you're asking.  Can you clarify?  Comment: I'm not sure what you're asking.  Can you clarify?  Comment: I'm not sure what you're asking.  Can you clarify?  Comment: I'm not sure what you're asking.  Can you clarify?  Comment: I'm not sure what you're asking.  Can you clarify?  Comment: I'm not sure what you're asking.  Can you clarify?  Comment: I'm not sure what you're asking.
SELECT "Teacher_ID", "Name" FROM "teacher" ORDER BY "Name" ASC  SELECT "Course_ID", "Course" FROM "course" ORDER BY "Course" ASC  SELECT "Course_ID", "Teacher_ID", "Grade" FROM "course_arrange" ORDER BY "Course_ID", "Teacher_ID", "Grade" ASC
SELECT "Teacher_ID" FROM "course_arrange" WHERE "Course_ID" = 1 AND "Grade" = 1;
SELECT * FROM "course_arrange" WHERE "Course_ID" = 1 AND "Teacher_ID" = 1;
SELECT "Teacher_ID", COUNT("Course_ID") AS "Course_Count" FROM "course_arrange" GROUP BY "Teacher_ID" ORDER BY "Course_Count" DESC
SELECT * FROM "teacher"  SELECT * FROM "course_arrange"  SELECT * FROM "course"  SELECT * FROM "teacher"  SELECT * FROM "course_arrange"  SELECT * FROM "course"  SELECT * FROM "teacher"  SELECT * FROM "course_arrange"  SELECT * FROM "course"  SELECT * FROM "teacher"  SELECT * FROM "course_arrange"  SELECT * FROM "course"  SELECT * FROM "teacher"  SELECT * FROM "course_arrange"  SELECT * FROM "course"  SELECT * FROM "teacher"  SELECT * FROM "course_arrange"  SELECT * FROM "course"  SELECT * FROM "teacher"  SELECT * FROM "course_arrange"  SELECT * FROM "course"  SELECT * FROM "teacher"  SELECT * FROM "course_arrange"  SELECT * FROM "course"  SELECT * FROM "teacher"  SELECT * FROM "course_arrange"  SELECT * FROM "course"  SELECT * FROM
SELECT "Teacher_ID", "Name" FROM "teacher" WHERE EXISTS ( SELECT "Teacher_ID" FROM "course_arrange" WHERE "Teacher_ID" = "Teacher_ID" AND "Course_ID" = "Course_ID" AND "Grade" = "Grade" )
SELECT * FROM "course_arrange" WHERE "Teacher_ID" IN ( SELECT "Teacher_ID" FROM "course_arrange" GROUP BY "Teacher_ID" HAVING COUNT("Teacher_ID") > 1 )
SELECT * FROM "teacher" WHERE "Teacher_ID" NOT IN (SELECT "Teacher_ID" FROM "course_arrange");
SELECT * FROM "course_arrange" WHERE "Course_ID" IS NULL;
SELECT COUNT(*) FROM "visitor" WHERE "Level_of_membership" = 1 AND "Age" < 30;
SELECT "visitor"."Name", "visitor"."Level_of_membership" FROM "visitor" WHERE "visitor"."Level_of_membership" > 4 ORDER BY "visitor"."Level_of_membership" DESC
SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4;
SELECT "Name", "Level_of_membership" FROM "visitor" WHERE "Level_of_membership" > 4 ORDER BY "Age" ASC
SELECT "Museum_ID", "Name" FROM "museum" GROUP BY "Museum_ID" ORDER BY "Num_of_Staff" DESC LIMIT 1;
SELECT "Museum_ID", AVG("Num_of_Staff") FROM "visit" WHERE "Open_Year" < '2009' GROUP BY "Museum_ID" \end{code}  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.
SELECT "Museum_ID", "Name", "Num_of_Staff", "Open_Year" FROM "museum" WHERE "Name" = 'Plaza Museum'
SELECT "Museum_ID", "Name" FROM "museum" WHERE "Num_of_Staff" > (SELECT MIN("Num_of_Staff") FROM "museum" WHERE "Open_Year" > '2010') ORDER BY "Num_of_Staff" DESC \end{code}  Comment: I'm not sure if this is the best way to do it, but it works.  Comment: @user3783243: I'm not sure either, but it's the only way I can think of.  Comment: @user3783243: I've added an explanation.  Comment: @user3783243: I've added an explanation.  Comment: @user3783243: I've added an explanation.  Comment: @user3783243: I've added an explanation.  Comment: @user3783243: I've added an explanation.  Comment: @user3783243: I've added an explanation.
SELECT "visitor"."ID", "visitor"."Name", "visitor"."Age" FROM "visitor" WHERE "visitor"."ID" IN ( SELECT "visitor_ID" FROM "visit" GROUP BY "visitor_ID" HAVING COUNT("visitor_ID") > 1 ) \end{code}  Comment: I'm not sure if this is the right way to do it, but I'm getting the following error:  Comment: @user3725079: I've updated the answer.  Comment: I'm getting the following error:  Comment: @user3725079: I've updated the answer.  Comment: I'm getting the following error:  Comment: @user3725079: I've updated the answer.  Comment: I'm getting the following error:  Comment: @user3725079: I've updated the answer.  Comment: I'm getting the following error:  Comment: @user37250
SELECT v.ID, v.Name, v.Level_of_membership, v.Age, v.Total_spent FROM visitor v INNER JOIN visit vv ON v.ID = vv.visitor_ID WHERE vv.Total_spent = (SELECT MAX(vv2.Total_spent) FROM visit vv2 INNER JOIN visitor vv3 ON vv2.visitor_ID = vv3.ID WHERE vv3.Total_spent > 0) ORDER BY v.Total_spent DESC \end{code}  Comment: I'm not sure if this is the best way to do it, but it works.  Comment: @user1234567890 I'm not sure if this is the best way to do it, but it works.  Comment: @user1234567890 I'm not sure if this is the best way to do it, but it works.  Comment: @user1234567890 I'm not sure if this is the best
SELECT "Museum_ID", "Name" FROM "visit" GROUP BY "Museum_ID", "Name" ORDER BY COUNT(*) DESC
SELECT * FROM "visit" WHERE "Museum_ID" = 0;
SELECT "Name", "Age" FROM "visitor" WHERE "Num_of_Ticket" = ( SELECT MAX("Num_of_Ticket") FROM "visit" )
SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit GROUP BY visit.Museum_ID \end{code}  Comment: I'm not sure what you're asking.  What is the question?  Comment: I'm not sure what you're asking.  What is the question?  Comment: I'm not sure what you're asking.  What is the question?  Comment: I'm not sure what you're asking.  What is the question?  Comment: I'm not sure what you're asking.  What is the question?  Comment: I'm not sure what you're asking.  What is the question?  Comment: I'm not sure what you're asking.  What is the question?  Comment: I'm not sure what you're asking.  What is the question?  Comment: I'm not sure what you're asking.  What is the question?  Comment: I'm not sure what you're asking.  What is the question?  Comment: I'm
SELECT SUM(Total_spent) FROM visit WHERE Level_of_membership = 1
SELECT * FROM visit WHERE museum_id IN (SELECT museum_id FROM museum WHERE open_year < 2009) AND visitor_id IN (SELECT visitor_id FROM visitor WHERE level_of_membership = 1)
SELECT COUNT(*) FROM visitor WHERE NOT EXISTS ( SELECT * FROM visit WHERE visit.visitor_ID = visitor.ID AND visit.Museum_ID > 2010 )
SELECT * FROM "museum" WHERE "Open_Year" > 2013 AND "Open_Year" < 2008;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM matches
SELECT COUNT(*) FROM matches
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT AVG(loser_age) AS loser_age, AVG(winner_age) AS winner_age FROM matches GROUP BY loser_age, winner_age \end{code}  Comment: I'm not sure if I understand your question correctly. Do you want to find the average age of the losers and winners of all matches?  Comment: Yes, that is correct.  Comment: I've added an answer.  Answer: You can use the `AVG()` function to find the average age of the losers and winners of all matches.  \begin{code} SELECT AVG(loser_age) AS loser_age, AVG(winner_age) AS winner_age FROM matches GROUP BY loser_age, winner_age \end{code}  Comment: I'm getting an error: "ERROR:  column "loser_age" must appear in the GROUP BY clause or be used in an aggregate function"  Comment: @user1234567890 I've updated the answer. You need to group by loser_
SELECT AVG(loser_age), AVG(winner_age) FROM matches GROUP BY loser_age, winner_age ORDER BY loser_age, winner_age \end{code}  Comment: I'm not sure what you mean by "average ages of losers and winners across matches".  Do you mean the average age of the loser in each match, or the average age of the winner in each match?  Comment: I mean the average age of the loser in each match.  Comment: I'm not sure what you mean by "loser" and "winner" in this context.  Do you mean the loser in each match, or the loser in each match in the aggregate?  Comment: I mean the loser in each match.  Comment: I'm not sure what you mean by "loser" and "winner" in this context.  Do you mean the loser in each match, or the loser in each match in the aggregate?  Comment: I mean the loser in each match.  Comment: I'm not sure what you mean by "loser
SELECT AVG(ranking) FROM rankings WHERE winner_id IS NOT NULL;
SELECT AVG(ranking) FROM rankings WHERE winner_id IS NOT NULL;
SELECT * FROM rankings WHERE ranking_points > 0 AND ranking_points < 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT * FROM rankings WHERE ranking_points = (SELECT MAX(ranking_points) FROM rankings WHERE ranking_points IS NOT NULL)
SELECT DISTINCT country_code FROM players;
SELECT DISTINCT country_code FROM players;
SELECT DISTINCT loser_name FROM matches
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT * FROM matches WHERE best_of > 10;
SELECT * FROM matches WHERE best_of > 10;
SELECT winner_name FROM matches WHERE winner_id IN (     SELECT winner_id     FROM rankings     WHERE ranking_date >= '2013-01-01'     AND ranking_date <= '2016-01-01' ) AND winner_id IN (     SELECT winner_id     FROM rankings     WHERE ranking_date >= '2016-01-01'     AND ranking_date <= '2019-01-01' ) ORDER BY winner_name \end{code}  Comment: I'm not sure if I understand your question correctly. Do you want to list all players who won a match in 2013 and 2016?  Comment: @JuanCarlosOropeza yes, that is correct.  Answer: You can use a `JOIN` to get the players who won in both years.  \begin{code} SELECT winner_name FROM matches JOIN rankings r1 ON winner_id = r1.player_id JOIN rankings r2
SELECT * FROM rankings WHERE ranking_date = '2013-01-01' AND ranking = 1 AND player_id IN (SELECT player_id FROM rankings WHERE ranking_date = '2016-01-01' AND ranking = 1)
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016
SELECT COUNT(*) FROM matches WHERE YEAR(match_date) = 2013 OR YEAR(match_date) = 2016;
SELECT * FROM rankings WHERE ranking_points > 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT first_name, country_code FROM players WHERE player_id IN (     SELECT winner_id     FROM matches     WHERE match_num = 1     AND winner_id IN (         SELECT loser_id         FROM matches         WHERE match_num = 2         AND loser_id IN (             SELECT winner_id             FROM matches             WHERE match_num = 3             AND winner_id IN (                 SELECT loser_id                 FROM matches                 WHERE match_num = 4                 AND loser_id IN (                     SELECT winner_id                     FROM matches                     WHERE match_num = 5                     AND winner_id IN (                         SELECT loser_id                         FROM matches                         WHERE match_num = 6                         AND loser_id IN (                             SELECT winner_id                             FROM matches                             WHERE match_num = 7                             AND winner_id IN (                                 SELECT loser_id                                 FROM matches                                 WHERE match_num = 8                                 AND loser_
SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players) ORDER BY birth_date DESC
SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players);
SELECT first_name, last_name FROM players ORDER BY birth_date ASC;
SELECT "first_name" || ' ' || "last_name" AS "full_name", "birth_date" FROM players ORDER BY "birth_date" ASC;
SELECT first_name, last_name, birth_date FROM players WHERE hand = 'L' AND birth_date < '1980-01-01' ORDER BY birth_date ASC
SELECT "first_name", "last_name" FROM players WHERE "hand" = "left" ORDER BY "birth_date" ASC
SELECT first_name, country_code FROM rankings WHERE ranking_points = (SELECT MAX(ranking_points)                         FROM rankings                         WHERE ranking_points > 0) ORDER BY ranking_points DESC LIMIT 1 \end{code}  Comment: I'm not sure if I understand your question correctly. Do you want to find the player who has the most number of tours?  Comment: Yes, that is correct.  Comment: I've updated my answer.  Comment: I'm getting an error: "ERROR:  column "ranking_points" does not exist"  Comment: I've updated my answer.  Comment: I'm getting an error: "ERROR:  column "ranking_points" does not exist"  Comment: I've updated my answer.  Comment: I'm getting an error: "ERROR:  column "ranking_points" does not exist"  Comment: I've updated my answer.  Comment: I'm getting an error: "ERROR:  column "ranking_points" does not exist"  Comment
SELECT player_id, first_name, country_code FROM players WHERE player_id = (SELECT player_id                    FROM rankings                    WHERE ranking_points = (SELECT MAX(ranking_points)                                            FROM rankings)                    ORDER BY ranking_points DESC                    LIMIT 1) ORDER BY player_id; \end{code}  Comment: I'm not sure if I understand your question correctly. Do you want to know the player with the most tours?  Comment: Yes, I want to know the player with the most tours.  Comment: I've added an answer.  Answer: You can use the following query:  \begin{code} SELECT player_id, first_name, country_code FROM players WHERE player_id = (SELECT player_id                    FROM rankings                    WHERE ranking_points = (SELECT MAX(ranking_points)                                            FROM rankings)                    ORDER BY ranking_points DESC                    LIMIT 1) ORDER BY player_id; \end{code}  Comment: I'
SELECT year, COUNT(*) FROM matches GROUP BY year ORDER BY year DESC \end{code}  Comment: I'm not sure if I understand your question correctly. Do you want to find the year with the most matches?  Comment: Yes, that is correct.  Comment: I've added an answer.  Answer: You can use the following query:  \begin{code} SELECT year, COUNT(*) FROM matches GROUP BY year ORDER BY year DESC \end{code}  Comment: Thank you for your answer. I'm getting the following error:  Comment: ERROR:  column "year" does not exist LINE 1: SELECT year, COUNT(*)  Comment: @user3783243: I've updated the answer.  Comment: Thank you for your help. I'm getting the following error:  Comment: ERROR:  column "year" does not exist LINE 1: SELECT year, COUNT(*)  Comment: @user3783243: I've updated the answer.  Comment: Thank you for your help. I'm getting the following
SELECT year, COUNT(*) FROM matches GROUP BY year ORDER BY year DESC \end{code}  Comment: I'm not sure if I understand your question correctly. Do you want to know the year with the most matches?  Comment: @JuanCarlosOropeza yes, that is correct.  Comment: @JuanCarlosOropeza I've added the schema to the question.  Comment: @JuanCarlosOropeza I've added the schema to the question.  Comment: @JuanCarlosOropeza I've added the schema to the question.  Comment: @JuanCarlosOropeza I've added the schema to the question.  Comment: @JuanCarlosOropeza I've added the schema to the question.  Comment: @JuanCarlosOropeza I've added the schema to the question.  Comment: @JuanCarlosOropeza I've added the schema to the question.  Comment: @JuanCarlosOropeza I've added the schema to the question.
SELECT winner_name, winner_rank_points FROM rankings WHERE ranking_points = (     SELECT MAX(ranking_points)     FROM rankings     WHERE ranking_points > 0 ) \end{code}  Comment: I'm not sure if I understand your question correctly. Do you want to find the player with the most wins?  Comment: @JonathanKuhn yes, I want to find the player with the most wins.  Comment: @JonathanKuhn I've updated the question with the schema.  Comment: @JonathanKuhn I've updated the question with the schema.  Comment: @JonathanKuhn I've updated the question with the schema.  Comment: @JonathanKuhn I've updated the question with the schema.  Comment: @JonathanKuhn I've updated the question with the schema.  Comment: @JonathanKuhn I've updated the question with the schema.  Comment: @JonathanKuhn I've updated the question with the schema.  Comment
SELECT * FROM rankings WHERE ranking_points = (SELECT MAX(ranking_points) FROM rankings)
SELECT * FROM rankings WHERE ranking_points = (SELECT MAX(ranking_points) FROM rankings WHERE ranking_points > 0 AND ranking_points < 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT * FROM rankings WHERE ranking_points = (SELECT MAX(ranking_points) FROM rankings WHERE ranking_points > 0 AND ranking_date = '2016-01-01'); \end{code}  Comment: I'm not sure what you mean by "most rank points".  Do you mean the player with the highest ranking points?  Comment: @TimBiegeleisen yes, that's what I mean.  Comment: @TimBiegeleisen I've updated the question to make it more clear.  Comment: @TimBiegeleisen I've updated the question to make it more clear.  Comment: @TimBiegeleisen I've updated the question to make it more clear.  Comment: @TimBiegeleisen I've updated the question to make it more clear.  Comment: @TimBiegeleisen I've updated the question to make it more clear.  Comment: @TimBiegeleisen I've updated the question to make it more clear.  Comment: @TimBiegeleisen I've updated the question to make it more clear.
SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches) \end{code}  Comment: I'm not sure what you mean by "the names of loser and winner who played in the match with greatest number of minutes".  Do you mean the names of the players who played in the match with the greatest number of minutes?  Comment: @JonathanLeffler I mean the names of the players who played in the match with the greatest number of minutes.  Comment: @JonathanLeffler I've edited the question to make it clearer.  Comment: @JonathanLeffler I've edited the question to make it clearer.  Comment: @JonathanLeffler I've edited the question to make it clearer.  Comment: @JonathanLeffler I've edited the question to make it clearer.  Comment: @JonathanLeffler I've edited the question to make it clearer.  Comment: @JonathanLeffler I've edited the question to make it clearer.  Comment: @Jonathan
SELECT * FROM matches WHERE "best_of" = 100 AND "draw_size" = 100 AND "loser_age" > "winner_age" AND "loser_id" = "winner_id"
SELECT player_id, first_name, AVG(ranking) AS avg_ranking FROM rankings GROUP BY player_id, first_name ORDER BY avg_ranking DESC \end{code}  Comment: I'm not sure what you mean by "the average ranking for each player and their first name".  Do you mean the average ranking for each player, or the average ranking for each first name?  Comment: I mean the average ranking for each player and their first name.  Comment: I'm not sure what you mean by "the average ranking for each player and their first name".  Do you mean the average ranking for each player, or the average ranking for each first name?  Comment: I mean the average ranking for each player and their first name.  Comment: I've updated my answer to show how to do this.  Answer: You can use the `GROUP BY` clause to group the results by player_id and first_name.  Then you can use the `AVG()` function to get the average ranking for each player and their first name.  \begin{code} SELECT player_id, first
SELECT first_name, AVG(ranking) FROM rankings GROUP BY first_name
SELECT player_id, first_name, sum(ranking_points) AS total_points FROM rankings GROUP BY player_id, first_name ORDER BY total_points DESC \end{code}  Comment: I'm not sure if I understand your question correctly. Do you want to find the total ranking points for each player and their first name?  Comment: Yes, that is correct.  Comment: I've updated my answer.  Comment: I'm getting an error: "ERROR:  column "first_name" does not exist"  Comment: I've updated my answer.  Comment: I'm getting an error: "ERROR:  column "first_name" does not exist"  Comment: I've updated my answer.  Comment: I'm getting an error: "ERROR:  column "first_name" does not exist"  Comment: I've updated my answer.  Comment: I'm getting an error: "ERROR:  column "first_name" does not exist"  Comment: I've updated my answer.  Comment: I'm getting an error
SELECT first_name, sum(ranking_points) FROM rankings GROUP BY first_name ORDER BY first_name \end{code}  Comment: I'm not sure if I understand the question correctly, but I think you want to group by first_name and then sum the ranking_points.  Comment: @JonathanGray I've added the question to the post.  Comment: @JonathanGray I've added the question to the post.  Comment: @JonathanGray I've added the question to the post.  Comment: @JonathanGray I've added the question to the post.  Comment: @JonathanGray I've added the question to the post.  Comment: @JonathanGray I've added the question to the post.  Comment: @JonathanGray I've added the question to the post.  Comment: @JonathanGray I've added the question to the post.  Comment: @JonathanGray I've added the question to the post.  Comment: @Jon
SELECT COUNT(DISTINCT player_id) AS "players" FROM players GROUP BY country_code ORDER BY players DESC
SELECT COUNT(DISTINCT country_code) AS "count" FROM players GROUP BY country_code ORDER BY "count" DESC
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) = (SELECT COUNT(*) FROM players) ORDER BY COUNT(*) DESC \end{code}  Comment: I'm not sure if I understand your question correctly. Do you want to find the country with the most players?  Comment: Yes, I want to find the country with the most players.  Comment: I've added an answer.  Answer: You can use the following query:  \begin{code} SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) = (SELECT COUNT(*) FROM players) ORDER BY COUNT(*) DESC \end{code}  Comment: I'm getting an error: "ERROR:  column "country_code" does not exist"  Comment: @user3783243: I've updated the answer.  Comment: I'm getting an error: "ERROR:  column "country_code" does not exist"  Comment: @user3783243: I've updated the answer again.  Comment: I'm getting an error
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50
SELECT DISTINCT country_code FROM matches GROUP BY country_code HAVING COUNT(*) > 50
SELECT ranking_date, COUNT(DISTINCT ranking_points) AS total_tours FROM rankings GROUP BY ranking_date ORDER BY ranking_date \end{code}  Comment: I'm not sure I understand the question.  What do you mean by "tours"?  Do you mean the number of times a player has been ranked?  Comment: @TimBiegeleisen I'm not sure I understand the question either.  I'm guessing the OP wants to know how many times a player has been ranked in the top 100.  Comment: @TimBiegeleisen I'm not sure I understand the question either.  I'm guessing the OP wants to know how many times a player has been ranked in the top 100.  Comment: @TimBiegeleisen I'm not sure I understand the question either.  I'm guessing the OP wants to know how many times a player has been ranked in the top 100.  Comment: @TimBiegeleisen I'm not sure I understand the question either.  I'm guessing the OP wants to know how many times a player
SELECT COUNT(DISTINCT ranking_date) AS total_tours,        ranking_date FROM rankings GROUP BY ranking_date ORDER BY ranking_date \end{code}  Comment: I'm not sure I understand the question.  Do you want to know how many tours there were for each ranking date?  Comment: Yes, that is correct.  Comment: I've added an answer.  Answer: You can use `COUNT(DISTINCT)` to count the number of distinct values in a column.  In this case, you want to count the number of distinct ranking dates.  \begin{code} SELECT COUNT(DISTINCT ranking_date) AS total_tours,        ranking_date FROM rankings GROUP BY ranking_date ORDER BY ranking_date \end{code}  Comment: Thank you for your help.
SELECT year, COUNT(*) AS matches_per_year FROM matches GROUP BY year;
SELECT COUNT(*) FROM matches WHERE year = 2015; SELECT COUNT(*) FROM matches WHERE year = 2016; SELECT COUNT(*) FROM matches WHERE year = 2017; SELECT COUNT(*) FROM matches WHERE year = 2018; SELECT COUNT(*) FROM matches WHERE year = 2019; SELECT COUNT(*) FROM matches WHERE year = 2020; SELECT COUNT(*) FROM matches WHERE year = 2021; SELECT COUNT(*) FROM matches WHERE year = 2022; SELECT COUNT(*) FROM matches WHERE year = 2023; SELECT COUNT(*) FROM matches WHERE year = 2024; SELECT COUNT(*) FROM matches WHERE year = 2025; SELECT COUNT(*) FROM matches WHERE year = 2026; SELECT COUNT(*) FROM matches WHERE year = 2027; SELECT COUNT(*) FROM matches WHERE year = 2028; SELECT COUNT(*) FROM matches WHERE year = 2029; SELECT COUNT(*) FROM matches WHERE year = 2030; SELECT COUNT(*) FROM matches WHERE year = 2031; SELECT
SELECT     "winner_name",     "winner_rank" FROM     matches WHERE     "winner_age" < 20 ORDER BY     "winner_age" ASC LIMIT 3 \end{code}  Comment: I'm not sure what you mean by "the 3 youngest winners across all matches".  Do you mean the 3 youngest winners in the most recent matches?  Or the 3 youngest winners in all matches?  Or the 3 youngest winners in all matches in the last 10 years?  Comment: I mean the 3 youngest winners in all matches.  Comment: I'm not sure what you mean by "all matches".  Do you mean all matches in the last 10 years?  Or all matches in the last 10 years that have a winner?  Or all matches in the last 10 years that have a winner and a loser?  Comment: I mean all matches in the last 10 years that have a winner and a loser.  Comment: I've updated my answer.  I
SELECT * FROM rankings WHERE ranking_date >= '2010-01-01' AND ranking_date <= '2010-01-01' AND ranking_points >= 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT COUNT(*) FROM matches WHERE winner_hand = 'left' AND winner_id IN (SELECT player_id FROM rankings WHERE ranking_points > 1000000) AND winner_id IN (SELECT player_id FROM rankings WHERE ranking_points > 1000000) AND winner_id IN (SELECT player_id FROM rankings WHERE ranking_points > 1000000) AND winner_id IN (SELECT player_id FROM rankings WHERE ranking_points > 1000000) AND winner_id IN (SELECT player_id FROM rankings WHERE ranking_points > 1000000) AND winner_id IN (SELECT player_id FROM rankings WHERE ranking_points > 1000000) AND winner_id IN (SELECT player_id FROM rankings WHERE ranking_points > 1000000) AND winner_id IN (SELECT player_id FROM rankings WHERE ranking_points > 1000000) AND winner_id IN (SELECT player_id FROM rankings WHERE ranking_
SELECT COUNT(DISTINCT winner_hand) FROM matches WHERE winner_hand = 'L' AND winner_id IN (SELECT player_id FROM rankings WHERE ranking_points > 1000000) AND winner_id IN (SELECT player_id FROM rankings WHERE ranking_points > 1000000) AND winner_id IN (SELECT player_id FROM rankings WHERE ranking_points > 1000000) AND winner_id IN (SELECT player_id FROM rankings WHERE ranking_points > 1000000) AND winner_id IN (SELECT player_id FROM rankings WHERE ranking_points > 1000000) AND winner_id IN (SELECT player_id FROM rankings WHERE ranking_points > 1000000) AND winner_id IN (SELECT player_id FROM rankings WHERE ranking_points > 1000000) AND winner_id IN (SELECT player_id FROM rankings WHERE ranking_points > 1000000) AND winner_id IN (SELECT player_
SELECT first_name, country_code, birth_date FROM rankings WHERE ranking_points = (SELECT MAX(ranking_points)                         FROM rankings                         WHERE ranking_points IS NOT NULL) AND player_id = (SELECT MAX(player_id)                  FROM rankings                  WHERE ranking_points IS NOT NULL) AND ranking_points IS NOT NULL ORDER BY ranking_points DESC LIMIT 1 \end{code}  Comment: I'm not sure if I understand your question correctly. Do you want to find the player with the highest ranking points in all matches?  Comment: Yes, that is correct.  Comment: I've added an answer.  Answer: You can use the following query:  \begin{code} SELECT first_name, country_code, birth_date FROM rankings WHERE ranking_points = (SELECT MAX(ranking_points)                         FROM rankings                         WHERE ranking_points IS NOT NULL) AND player_id = (SELECT MAX(player_id)                  FROM rankings                  WHERE ranking_points IS NOT NULL) AND ranking
SELECT player_id, first_name, country_code, birth_date FROM players WHERE player_id IN (     SELECT player_id     FROM rankings     GROUP BY player_id     HAVING SUM(ranking_points) = (SELECT MAX(ranking_points) FROM rankings) ) ORDER BY player_id \end{code}  Comment: I'm not sure if I understand your question correctly. Do you want to know the player with the most winner rank points across all matches?  Comment: Yes, that is correct.  Comment: I've added an answer.  Answer: You can use the following query:  \begin{code} SELECT player_id, first_name, country_code, birth_date FROM players WHERE player_id IN (     SELECT player_id     FROM rankings     GROUP BY player_id     HAVING SUM(ranking_points) = (SELECT MAX(ranking_points) FROM rankings) ) ORDER BY player_id \end{code}  Comment: I'm getting an error: "ERROR:
SELECT COUNT(DISTINCT hand) AS hand_count, hand FROM players GROUP BY hand
SELECT COUNT(DISTINCT hand) AS hand_count, hand FROM players GROUP BY hand
SELECT * FROM death WHERE killed = 0 AND injured = 0 AND caused_by_ship_id = 0;
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT "battle".* FROM "battle" WHERE "battle".date = '1805-09-02' ORDER BY "battle".date  SELECT "ship".* FROM "ship" WHERE "ship".lost_in_battle = 1 ORDER BY "ship".name  SELECT "death".* FROM "death" WHERE "death".caused_by_ship_id = 1 ORDER BY "death".date
SELECT     SUM(death.killed) AS death_toll,     SUM(death.injured) AS injured_toll,     SUM(death.killed) - SUM(death.injured) AS death_toll_minus_injured_toll,     SUM(death.killed) - SUM(death.injured) AS death_toll_minus_injured_toll,     SUM(death.killed) - SUM(death.injured) AS death_toll_minus_injured_toll,     SUM(death.killed) - SUM(death.injured) AS death_toll_minus_injured_toll,     SUM(death.killed) - SUM(death.injured) AS death_toll_minus_injured_toll,     SUM(death.killed) - SUM(death.injured) AS death_toll_minus_injured_toll,     SUM(death.killed) -
SELECT     SUM(injured) FROM     death GROUP BY     caused_by_ship_id \end{code}  Comment: I'm not sure what you mean by "average number of injuries caused each time".  Do you mean the average number of injuries per ship?  Or the average number of injuries per battle?  Comment: I mean the average number of injuries per battle.  Comment: I'm not sure how to do that.  I'm not sure how to get the number of battles, or the number of ships in each battle.  I'm not sure how to get the number of injuries in each battle.  I'm not sure how to get the average number of injuries per battle.  I'm not sure how to get the average number of injuries per ship.  I'm not sure how to get the average number of injuries per battle per ship.  I'm not sure how to get the average number of injuries per battle per ship per battle.  I'm not sure how to get the average number of injuries per battle per ship per battle per ship.
SELECT * FROM death WHERE killed = 1 AND injured = 1 AND caused_by_ship_id = (SELECT id FROM ship WHERE tonnage = 't')
SELECT * FROM battle WHERE bulgarian_commander <> 'Boril'
SELECT * FROM battle WHERE lost_in_battle = 1 AND ship_type = 'Brig'
SELECT * FROM battle WHERE lost_in_battle > 10
SELECT * FROM death WHERE killed = 0 GROUP BY caused_by_ship_id ORDER BY count(*) DESC LIMIT 1 \end{code}  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the table structure?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the table structure?  Comment: I'm asking how to write the query.  Comment: I've added an answer.  I'm not sure if it's what you're looking for.  Answer: \begin{code} SELECT * FROM death WHERE killed = 0 GROUP BY caused_by_ship_id ORDER BY count(*) DESC LIMIT 1 \end{code}  Comment: I'm getting an error: "ERROR:  column "caused_by_ship_id" must appear in the GROUP BY clause or be used in an aggregate function"
SELECT DISTINCT battle.name FROM battle INNER JOIN death ON battle.id = death.caused_by_ship_id INNER JOIN ship ON death.caused_by_ship_id = ship.id WHERE battle.bulgarian_commander = 'Kaloyan' AND battle.latin_commander = 'Baldwin I' ORDER BY battle.date DESC
SELECT * FROM battle;  SELECT * FROM death;  SELECT * FROM ship;  SELECT * FROM death WHERE killed = 0;  SELECT * FROM death WHERE killed = 1;  SELECT * FROM death WHERE killed = 2;  SELECT * FROM death WHERE killed = 3;  SELECT * FROM death WHERE killed = 4;  SELECT * FROM death WHERE killed = 5;  SELECT * FROM death WHERE killed = 6;  SELECT * FROM death WHERE killed = 7;  SELECT * FROM death WHERE killed = 8;  SELECT * FROM death WHERE killed = 9;  SELECT * FROM death WHERE killed = 10;  SELECT * FROM death WHERE killed = 11;  SELECT * FROM death WHERE killed = 12;  SELECT * FROM death WHERE killed = 13;  SELECT * FROM death WHERE killed = 14;  SELECT * FROM death WHERE killed = 15;  SELECT * FROM death WHERE killed = 16;  SELECT * FROM death WHERE killed = 17;  SELECT * FROM death WHERE killed = 18
SELECT * FROM battle WHERE lost_in_battle = 0 AND tonnage = '225'
SELECT "name", "date" FROM "battle" WHERE "bulgarian_commander" = 'Lettice' AND "latin_commander" = 'HMS Atalanta'
SELECT "name", "result", "bulgarian_commander" FROM "battle" WHERE "lost_in_battle" = 0 AND "location" = 'English Channel' ORDER BY "date"
SELECT * FROM death WHERE note LIKE 'East%'
SELECT * FROM Addresses;
error
SELECT COUNT(*) FROM `Courses`;
SELECT COUNT(*) FROM `Courses`;
INSERT INTO `Addresses` (`address_id`, `line_1`, `line_2`, `line_3`, `city`, `zip_postcode`, `state_province_county`, `country`) VALUES (1, '1234 Main Street', 'Apt 1', 'Apt 2', 'Anytown', '12345', 'CA', 'USA'), (2, '1234 Main Street', 'Apt 1', 'Apt 2', 'Anytown', '12345', 'CA', 'USA'), (3, '1234 Main Street', 'Apt 1', 'Apt 2', 'Anytown', '12345', 'CA', 'USA'), (4, '1234 Main Street', 'Apt 1', 'Apt 2', 'Anytown', '12345', 'CA', 'USA'), (5, '1234 Main Street', 'Apt 1', 'Apt 2', 'Anytown', '12345', 'CA', 'USA'), (6
SELECT * FROM `Courses` WHERE `course_name` LIKE 'Math%'
SELECT `Addresses`.`zip_postcode` FROM `Addresses` WHERE `Addresses`.`city` = 'Port Chelsea'
SELECT `Addresses`.`zip_postcode` FROM `Addresses` WHERE `Addresses`.`address_id` = 1;
SELECT department_name, department_id FROM `Degree_Programs` GROUP BY department_name, department_id ORDER BY department_name, department_id
SELECT * FROM `Degree_Programs` WHERE `department_id` = (SELECT `department_id` FROM `Degree_Programs` WHERE `department_id` = (SELECT `department_id` FROM `Degree_Programs` WHERE `department_id` = (SELECT `department_id` FROM `Degree_Programs` WHERE `department_id` = (SELECT `department_id` FROM `Degree_Programs` WHERE `department_id` = (SELECT `department_id` FROM `Degree_Programs` WHERE `department_id` = (SELECT `department_id` FROM `Degree_Programs` WHERE `department_id` = (SELECT `department_id` FROM `Degree_Programs` WHERE `department_id` = (SELECT `department_id` FROM `Degree_Programs` WHERE `department_id` = (SELECT `department_id` FROM `Degree_Programs` WHERE `department_id` = (SELECT `department_id` FROM `Deg
SELECT COUNT(DISTINCT `department_id`) AS `department_id` FROM `Degree_Programs` WHERE `department_id` IS NOT NULL
SELECT COUNT(DISTINCT `department_id`) AS `department_id` FROM `Degree_Programs` GROUP BY `department_id`
SELECT COUNT(DISTINCT `degree_summary_name`) AS `degree_summary_name_count` FROM `Degree_Programs`
SELECT COUNT(DISTINCT `degree_summary_name`) AS `degree_summary_name` FROM `Degree_Programs`
SELECT COUNT(DISTINCT `degree_summary_name`) AS `degree_summary_name` FROM `Degree_Programs` WHERE `department_id` = 1
SELECT COUNT(DISTINCT `degree_summary_name`) AS `degree_summary_name` FROM `Degree_Programs` WHERE `department_id` = 1
SELECT * FROM `Sections`;
CREATE TABLE `Sections_Courses` ( `section_course_id` INTEGER PRIMARY KEY, `section_id` INTEGER NOT NULL, `course_id` INTEGER NOT NULL, FOREIGN KEY (`section_id` ) REFERENCES `Sections`(`section_id` ), FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ) )  CREATE TABLE `Sections_Semesters` ( `section_semester_id` INTEGER PRIMARY KEY, `section_id` INTEGER NOT NULL, `semester_id` INTEGER NOT NULL, FOREIGN KEY (`section_id` ) REFERENCES `Sections`(`section_id` ), FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ) )  CREATE TABLE `Sections_Students` ( `section_student_id` INTEGER PRIMARY KEY, `section_id` INTEGER NOT NULL, `student_id`
SELECT * FROM `Courses` WHERE `course_id` IN (SELECT `course_id` FROM `Student_Enrolment_Courses` WHERE `student_enrolment_id` IN (SELECT `student_enrolment_id` FROM `Student_Enrolment` WHERE `student_id` IN (SELECT `student_id` FROM `Students` WHERE `current_address_id` IN (SELECT `address_id` FROM `Addresses` WHERE `address_id` IN (SELECT `address_id` FROM `Addresses` WHERE `address_id` IN (SELECT `address_id` FROM `Addresses` WHERE `address_id` IN (SELECT `address_id` FROM `Addresses` WHERE `address_id` IN (SELECT `address_id` FROM `Addresses` WHERE `address_id` IN (SELECT `address_id` FROM `Addresses` WHERE `address_id` IN (SELECT `address_id` FROM `Addresses` WHERE `address_id` IN (SELECT `address_id` FROM `Addresses` WHERE `address_id` IN (SELECT `address_id` FROM `Addresses` WHERE
SELECT * FROM `Courses` WHERE `Courses`.`course_id` IN (SELECT `Student_Enrolment_Courses`.`course_id` FROM `Student_Enrolment_Courses` WHERE `Student_Enrolment_Courses`.`student_enrolment_id` IN (SELECT `Student_Enrolment`.`student_enrolment_id` FROM `Student_Enrolment` WHERE `Student_Enrolment`.`student_id` IN (SELECT `Students`.`student_id` FROM `Students` WHERE `Students`.`current_address_id` IS NULL AND `Students`.`permanent_address_id` IS NULL)))
SELECT * FROM `Sections` ORDER BY `section_name` DESC;
SELECT * FROM `Addresses` ORDER BY `line_1` DESC;  SELECT * FROM `Addresses` ORDER BY `line_1` DESC;  SELECT * FROM `Addresses` ORDER BY `line_1` DESC;  SELECT * FROM `Addresses` ORDER BY `line_1` DESC;  SELECT * FROM `Addresses` ORDER BY `line_1` DESC;  SELECT * FROM `Addresses` ORDER BY `line_1` DESC;  SELECT * FROM `Addresses` ORDER BY `line_1` DESC;  SELECT * FROM `Addresses` ORDER BY `line_1` DESC;  SELECT * FROM `Addresses` ORDER BY `line_1` DESC;  SELECT * FROM `Addresses` ORDER BY `line_1` DESC;  SELECT * FROM `Addresses` ORDER BY `line_1` DESC;  SELECT * FROM `Addresses` ORDER BY `line_1` DESC;  SELECT * FROM `Addresses` ORDER BY `line_1` DESC;  SELECT * FROM `Addresses` ORDER BY `line_1` DESC;  SELECT * FROM `
SELECT * FROM `Semesters` WHERE `semester_name` = 'Fall'
SELECT * FROM `Semesters`
SELECT * FROM `Departments` WHERE `department_name` LIKE 'The Computer%'
SELECT * FROM `Departments` WHERE `department_name` LIKE 'Computer%';
SELECT * FROM Student_Enrolment_Courses WHERE student_enrolment_id IN (SELECT student_enrolment_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor of Arts') AND semester_id = 1);
SELECT     s.first_name,     s.middle_name,     s.last_name,     s.student_id,     dp.degree_summary_name,     dp.degree_summary_description,     dp.department_name,     dp.department_description,     sc.course_name,     sc.course_description,     sc.section_name,     sc.section_description,     sc.semester_name,     sc.semester_description,     sc.student_enrolment_id FROM     `Student_Enrolment` se INNER JOIN     `Student` s ON se.student_id = s.student_id INNER JOIN     `Degree_Programs` dp ON se.degree_program_id = dp.degree_program_id INNER JOIN     `Semesters` sems ON se.semester_id = sems.semester_id INNER JOIN     `Courses` courses ON se.course_id = courses.course_
SELECT * FROM Student_Enrolment WHERE degree_program_id = 1;
SELECT     `student_id`,     `first_name`,     `middle_name`,     `last_name` FROM     `Student_Enrolment` WHERE     `degree_program_id` = 1 ORDER BY     `student_id` ASC
SELECT COUNT(DISTINCT student_enrolment_id) AS `number_of_students_enrolled` FROM `Student_Enrolment` GROUP BY `degree_program_id` ORDER BY `number_of_students_enrolled` DESC
SELECT DISTINCT `degree_summary_name` FROM `Degree_Programs`
SELECT DISTINCT `Degree_Programs`.`degree_summary_name` FROM `Degree_Programs` INNER JOIN `Student_Enrolment` ON `Degree_Programs`.`degree_program_id` = `Student_Enrolment`.`degree_program_id` INNER JOIN `Student_Enrolment_Courses` ON `Student_Enrolment`.`student_enrolment_id` = `Student_Enrolment_Courses`.`student_enrolment_id` INNER JOIN `Courses` ON `Student_Enrolment_Courses`.`course_id` = `Courses`.`course_id` INNER JOIN `Semesters` ON `Courses`.`semester_id` = `Semesters`.`semester_id` INNER JOIN `Students` ON `Student_Enrolment`.`student_id` = `Students`.`student_id` WHERE `Degree_Programs`.`department_id` = 1 ORDER BY `Degree_Programs`.`degree_summary_name`
SELECT * FROM `Student_Enrolment` WHERE `degree_program_id` = (SELECT `degree_program_id` FROM `Degree_Programs` WHERE `degree_summary_name` = 'Bachelor of Arts')
SELECT * FROM Student_Enrolment_Courses WHERE student_enrolment_id IN (SELECT student_enrolment_id FROM Student_Enrolment_Courses GROUP BY student_enrolment_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Student_Enrolment_Courses));
SELECT     s.first_name,     s.middle_name,     s.last_name,     COUNT(s.student_id) AS enrollments FROM     Student_Enrolment s GROUP BY     s.first_name,     s.middle_name,     s.last_name ORDER BY     enrollments DESC
SELECT * FROM `Semesters` WHERE `Semesters`.`semester_id` NOT IN (SELECT `Student_Enrolment`.`semester_id` FROM `Student_Enrolment`);
SELECT * FROM `Semesters` WHERE `semester_name` = 'No Students Enrolled'
SELECT DISTINCT `course_name` FROM `Courses` WHERE EXISTS (SELECT * FROM `Student_Enrolment_Courses` WHERE `course_id` = `course_id`);
SELECT * FROM Student_Enrolment_Courses;
SELECT * FROM `Student_Enrolment_Courses` WHERE `student_enrolment_id` = (SELECT MAX(`student_enrolment_id`) FROM `Student_Enrolment_Courses`);
SELECT * FROM `Student_Enrolment_Courses` WHERE `student_enrolment_id` = (SELECT MAX(`student_enrolment_id`) FROM `Student_Enrolment_Courses`);
SELECT * FROM `Students` WHERE `current_address_id` = (SELECT `address_id` FROM `Addresses` WHERE `state_province_county` = 'NC' AND `country` = 'US' AND `other_address_details` = '');
SELECT * FROM `Students` WHERE `current_address_id` = 1 AND `permanent_address_id` = 2 AND `state_province_county` = 'NC' AND `date_first_registered` IS NULL;
SELECT * FROM `Transcripts` WHERE `transcript_date` >= '2010-01-01' AND `transcript_date` <= '2010-01-01' AND `transcript_id` > 1;
SELECT * FROM `Transcripts` WHERE `transcript_date` >= '2010-01-01' AND `transcript_date` <= '2010-01-01' AND `transcript_id` > 1
SELECT * FROM `Students` WHERE `first_name` = 'Timmothy' AND `last_name` = 'Ward';
SELECT * FROM `Students` WHERE `first_name` = 'Timmothy' AND `last_name` = 'Ward' AND `cell_mobile_number` = '1234567890'
SELECT * FROM `Students` WHERE `date_first_registered` = (SELECT MIN(`date_first_registered`) FROM `Students`);
SELECT * FROM `Students` WHERE `first_name` = 'John' AND `last_name` = 'Doe' AND `date_first_registered` = (SELECT MIN(`date_first_registered`) FROM `Students`);
SELECT * FROM `Students` WHERE `date_first_registered` = (SELECT MIN(`date_first_registered`) FROM `Students`);
SELECT * FROM `Students` WHERE `date_first_registered` = (SELECT MIN(`date_first_registered`) FROM `Students`);
SELECT * FROM `Addresses` WHERE `current_address_id` != `permanent_address_id` AND `first_name` = 'John'
SELECT * FROM `Students` WHERE `permanent_address_id` != `current_address_id`;
SELECT address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM Addresses WHERE address_id IN (SELECT address_id                      FROM Student_Enrolment                      GROUP BY address_id                      HAVING COUNT(*) = (SELECT COUNT(*)                                          FROM Student_Enrolment                                          GROUP BY address_id));
SELECT `address_id`, `line_1`, `line_2` FROM `Addresses` WHERE `address_id` IN (SELECT `current_address_id` FROM `Student_Enrolment` WHERE `student_enrolment_id` IN (SELECT `student_enrolment_id` FROM `Student_Enrolment_Courses` WHERE `student_course_id` IN (SELECT `student_course_id` FROM `Student_Enrolment_Courses` WHERE `student_course_id` IN (SELECT `student_course_id` FROM `Student_Enrolment_Courses` WHERE `student_course_id` IN (SELECT `student_course_id` FROM `Student_Enrolment_Courses` WHERE `student_course_id` IN (SELECT `student_course_id` FROM `Student_Enrolment_Courses` WHERE `student_course_id` IN (SELECT `student_course_id` FROM `Student_Enrolment_Courses` WHERE `student_course_id` IN (SELECT `student_course_id` FROM `Student_Enrolment_Courses` WHERE `student_
SELECT AVG(transcript_date) FROM `Transcripts`
SELECT AVG(transcript_date) FROM `Transcripts`;
error
SELECT * FROM `Transcripts` WHERE `transcript_date` = (SELECT MIN(`transcript_date`) FROM `Transcripts`);
SELECT COUNT(*) AS `transcript_count` FROM `Transcripts`;
SELECT COUNT(*) FROM `Transcripts`;
SELECT * FROM `Transcripts` ORDER BY `transcript_date` DESC LIMIT 1;
SELECT * FROM `Transcripts` ORDER BY `transcript_date` DESC LIMIT 1;
error
error
SELECT * FROM `Transcripts` ORDER BY `transcript_date` ASC LIMIT 1;
SELECT * FROM `Transcripts` ORDER BY `transcript_date` DESC LIMIT 1;  SELECT * FROM `Transcript_Contents` ORDER BY `student_course_id` ASC LIMIT 1;  SELECT * FROM `Transcript_Contents` ORDER BY `student_course_id` DESC LIMIT 1;  SELECT * FROM `Transcript_Contents` ORDER BY `student_course_id` ASC LIMIT 1;  SELECT * FROM `Transcript_Contents` ORDER BY `student_course_id` DESC LIMIT 1;  SELECT * FROM `Transcript_Contents` ORDER BY `student_course_id` ASC LIMIT 1;  SELECT * FROM `Transcript_Contents` ORDER BY `student_course_id` DESC LIMIT 1;  SELECT * FROM `Transcript_Contents` ORDER BY `student_course_id` ASC LIMIT 1;  SELECT * FROM `Transcript_Contents` ORDER BY `student_course_id` DESC LIMIT 1;  SELECT * FROM `Transcript_Contents` ORDER BY `student_course_id` ASC LIMIT 1;  SELECT * FROM `Transcript_Contents
SELECT * FROM `Student_Enrolment` WHERE `degree_program_id` = 1 AND `semester_id` = 1;
SELECT * FROM `Student_Enrolment` WHERE `degree_program_id` = 1 AND `semester_id` = 1;
SELECT COUNT(DISTINCT `Addresses`.`address_id`) AS `address_id` FROM `Addresses` WHERE `Addresses`.`address_id` NOT IN ( SELECT `Addresses`.`address_id` FROM `Addresses` WHERE `Addresses`.`address_id` IN ( SELECT `Addresses`.`address_id` FROM `Addresses` WHERE `Addresses`.`address_id` IN ( SELECT `Addresses`.`address_id` FROM `Addresses` WHERE `Addresses`.`address_id` IN ( SELECT `Addresses`.`address_id` FROM `Addresses` WHERE `Addresses`.`address_id` IN ( SELECT `Addresses`.`address_id` FROM `Addresses` WHERE `Addresses`.`address_id` IN ( SELECT `Addresses`.`address_id` FROM `Addresses` WHERE `Addresses`.`address_id` IN ( SELECT `Addresses`.`address_id` FROM `Addresses` WHERE `Addresses`.`address_id` IN ( SELECT `Addresses`.`address_id` FROM `Addresses` WHERE `Addresses
SELECT * FROM Addresses WHERE student_id IS NOT NULL;
SELECT * FROM `Students` ORDER BY `last_name` DESC, `first_name` DESC, `middle_name` DESC;
SELECT * FROM Students WHERE last_name = 'Brown' ORDER BY last_name DESC;
error
CREATE TABLE `Section_Course_Enrolment` ( `section_course_enrolment_id` INTEGER PRIMARY KEY, `section_id` INTEGER NOT NULL, `course_id` INTEGER NOT NULL, `student_enrolment_id` INTEGER NOT NULL, FOREIGN KEY (`section_id` ) REFERENCES `Sections`(`section_id` ), FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ), FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` ) )  CREATE TABLE `Section_Course_Enrolment_Transcript` ( `section_course_enrolment_transcript_id` INTEGER PRIMARY KEY, `section_course_enrolment_id` INTEGER NOT NULL, `transcript_id` INTEGER NOT NULL, FOREIGN KEY (`section_course_enrolment_id` ) REFERENCES `
SELECT     s.first_name,     s.middle_name,     s.last_name,     s.cell_mobile_number,     s.email_address,     s.ssn,     s.date_first_registered,     s.date_left,     s.other_student_details,     s.current_address_id,     s.permanent_address_id,     s.student_id,     s.degree_program_id,     s.semester_id,     s.student_enrolment_id,     s.student_course_id,     t.transcript_date,     t.other_details FROM     `Students` s     LEFT JOIN `Student_Enrolment` se ON s.student_id = se.student_id     LEFT JOIN `Student_Enrolment_Courses` sec ON se.student_enrolment_id = sec.student_enrolment_id     LEFT JOIN `Transcripts` t ON sec.student_course_id =
SELECT * FROM `Students` WHERE `permanent_address_id` = 1 AND `cell_mobile_number` = '09700166582';
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC
SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones' ORDER BY Cartoon.Title
SELECT COUNT(DISTINCT `Cartoon`.`Written_by`) FROM `Cartoon` WHERE `Cartoon`.`Written_by` = 'Joseph Kuhr'
SELECT COUNT(DISTINCT `Cartoon`.`Written_by`) FROM `Cartoon` WHERE `Cartoon`.`Written_by` = 'Joseph Kuhr'
SELECT Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel FROM Cartoon ORDER BY Cartoon.Original_air_date
CREATE TABLE "Movie" ( "id" real, "Title" text, "Directed_by" text, "Written_by" text, "Original_air_date" text, "Production_code" real, "Channel" text, PRIMARY KEY ("id"), FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`) )
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
SELECT Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Written_by = 'Brandon Vietti' OR Cartoon.Original_air_date = '2005-01-01' OR Cartoon.Production_code = '101' OR Cartoon.Channel = 'Cartoon Network' ORDER BY Cartoon.Title
SELECT COUNT(DISTINCT Channel) AS Count, Country FROM TV_Channel GROUP BY Country;
SELECT COUNT(DISTINCT Channel) AS "Number_of_Channels" FROM TV_Channel WHERE Country = 'USA'
SELECT DISTINCT "TV_Channel"."series_name", "TV_Channel"."Content" FROM "TV_Channel"
SELECT COUNT(*) FROM TV_Channel;
SELECT * FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT * FROM TV_series WHERE Channel = 'Sky Radio'
SELECT * FROM TV_Channel WHERE "Package_Option" = 'Sky Radio'
SELECT * FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'
SELECT COUNT(DISTINCT Channel) FROM TV_Channel WHERE Language = 'English'
SELECT * FROM TV_Channel;  SELECT * FROM TV_series;  SELECT * FROM Cartoon; \end{code}  Comment: I'm not sure what you're asking.  Are you asking how to get the data from the tables?  If so, you can use the `SELECT` statement.  Are you asking how to get the data from the tables into a single table?  If so, you can use the `JOIN` statement.  Are you asking how to get the data from the tables into a single table, and then sort it by the number of TV channels?  If so, you can use the `ORDER BY` statement.  Comment: I'm asking how to get the data from the tables into a single table, and then sort it by the number of TV channels.  Comment: I'm not sure what you mean by "sort it by the number of TV channels".  Do you mean sort it by the number of TV channels for each language?  If so, you can use the `GROUP BY` statement.  Do you mean sort it by the number of TV channels for each language, and then sort it by the number of TV channels
SELECT COUNT(DISTINCT Language) AS "Language_Count", Language FROM TV_Channel GROUP BY Language;
SELECT "Language", COUNT(DISTINCT "Channel") FROM "TV_Channel" GROUP BY "Language" ORDER BY "Language"
SELECT COUNT(DISTINCT Channel) AS "Number_of_Channels" FROM TV_Channel WHERE Language = 'English'  SELECT COUNT(DISTINCT Channel) AS "Number_of_Channels" FROM TV_Channel WHERE Language = 'Spanish'  SELECT COUNT(DISTINCT Channel) AS "Number_of_Channels" FROM TV_Channel WHERE Language = 'French'  SELECT COUNT(DISTINCT Channel) AS "Number_of_Channels" FROM TV_Channel WHERE Language = 'German'  SELECT COUNT(DISTINCT Channel) AS "Number_of_Channels" FROM TV_Channel WHERE Language = 'Italian'  SELECT COUNT(DISTINCT Channel) AS "Number_of_Channels" FROM TV_Channel WHERE Language = 'Portuguese'  SELECT COUNT(DISTINCT Channel) AS "Number_of_Channels" FROM TV_Channel WHERE Language = 'Russian'  SELECT COUNT(DISTINCT Channel) AS "Number_of_Channels" FROM TV_Channel WHERE Language = 'Japanese'
SELECT * FROM Cartoon WHERE Title = "The Rise of the Blue Beetle!"
SELECT "TV_Channel"."series_name" FROM "TV_Channel" JOIN "TV_series" ON "TV_Channel"."id" = "TV_series"."Channel" WHERE "TV_series"."id" = 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT * FROM Cartoon WHERE Channel = 'Sky Radio'
SELECT * FROM Cartoon WHERE Channel = 'Sky Radio' AND Title = 'Cartoon'
SELECT * FROM TV_series ORDER BY Rating DESC
SELECT * FROM `TV_series` WHERE `Rating` > 0 ORDER BY `Rating` DESC
SELECT * FROM TV_series WHERE Rating > 8.0 ORDER BY Rating DESC LIMIT 3;  SELECT * FROM TV_series WHERE Rating > 8.0 ORDER BY Rating DESC LIMIT 3;  SELECT * FROM TV_series WHERE Rating > 8.0 ORDER BY Rating DESC LIMIT 3;  SELECT * FROM TV_series WHERE Rating > 8.0 ORDER BY Rating DESC LIMIT 3;  SELECT * FROM TV_series WHERE Rating > 8.0 ORDER BY Rating DESC LIMIT 3;  SELECT * FROM TV_series WHERE Rating > 8.0 ORDER BY Rating DESC LIMIT 3;  SELECT * FROM TV_series WHERE Rating > 8.0 ORDER BY Rating DESC LIMIT 3;  SELECT * FROM TV_series WHERE Rating > 8.0 ORDER BY Rating DESC LIMIT 3;  SELECT * FROM TV_series WHERE Rating > 8.0 ORDER BY Rating DESC LIMIT 3;  SELECT * FROM TV_series WHERE Rating > 8.0 ORDER BY Rating DESC LIMIT 3;  SELECT * FROM TV_
SELECT * FROM TV_series WHERE Rating > 8.0 AND Rating < 10.0;
error
SELECT MAX(Share), MIN(Share) FROM TV_series WHERE Channel = 'HBO' AND Air_Date = '2015-01-01' AND Rating = '18-49' AND Share > 0 AND Share < 100
SELECT * FROM `TV_series` WHERE `Episode` = 'A Love of a Lifetime' AND `Air_Date` = '2012-01-01'
SELECT * FROM `TV_series` WHERE `Episode` = 'A Love of a Lifetime' AND `Air_Date` = '2012-01-01'
SELECT * FROM `TV_series` WHERE `Episode` = 'A Love of a Lifetime' AND `Weekly_Rank` > 100
SELECT * FROM `TV_series` WHERE `Episode` = 'A Love of a Lifetime' AND `Weekly_Rank` > 100
SELECT * FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT * FROM `TV_series` WHERE `Episode` = 'A Love of a Lifetime'
SELECT * FROM TV_series WHERE Channel = 'Sky Radio' AND Series_name = 'Sky Radio'
SELECT * FROM `TV_series` WHERE `Episode` = 'Sky Radio'
SELECT COUNT(DIRECTED_BY) AS "Directed_by" FROM Cartoon GROUP BY DIRECTED_BY ORDER BY DIRECTED_BY
SELECT COUNT(DISTINCT Cartoon.Directed_by) AS "Directed_by" FROM Cartoon GROUP BY Cartoon.Directed_by ORDER BY Cartoon.Directed_by
SELECT * FROM Cartoon ORDER BY Air_Date DESC LIMIT 1;  SELECT * FROM Cartoon ORDER BY Air_Date DESC LIMIT 1;  SELECT * FROM Cartoon ORDER BY Air_Date DESC LIMIT 1;  SELECT * FROM Cartoon ORDER BY Air_Date DESC LIMIT 1;  SELECT * FROM Cartoon ORDER BY Air_Date DESC LIMIT 1;  SELECT * FROM Cartoon ORDER BY Air_Date DESC LIMIT 1;  SELECT * FROM Cartoon ORDER BY Air_Date DESC LIMIT 1;  SELECT * FROM Cartoon ORDER BY Air_Date DESC LIMIT 1;  SELECT * FROM Cartoon ORDER BY Air_Date DESC LIMIT 1;  SELECT * FROM Cartoon ORDER BY Air_Date DESC LIMIT 1;  SELECT * FROM Cartoon ORDER BY Air_Date DESC LIMIT 1;  SELECT * FROM Cartoon ORDER BY Air_Date DESC LIMIT 1;  SELECT * FROM Cartoon ORDER BY Air_Date DESC LIMIT 1;  SELECT * FROM Cartoon ORDER BY Air_Date DESC LIMIT 1;  SELECT * FROM Cartoon ORDER BY Air_Date DESC LIMIT 1;
CREATE TABLE "Movie" ( "id" real, "Title" text, "Directed_by" text, "Written_by" text, "Original_air_date" text, "Production_code" real, "Channel" text, PRIMARY KEY ("id"), FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`) )
SELECT * FROM TV_Channel WHERE Hight_definition_TV = 'Yes'
SELECT * FROM TV_Channel WHERE Hight_definition_TV = 'Yes'
SELECT * FROM Cartoon WHERE Channel = 'Cartoon Network' AND Todd_Casey = 'Todd Casey'
SELECT * FROM Cartoon WHERE Channel = 'Cartoon Network' AND Todd_Casey = 'Todd Casey'
SELECT * FROM Cartoon WHERE Channel NOT IN (SELECT Channel FROM Cartoon WHERE Channel IN (SELECT Channel FROM Cartoon WHERE Title = 'The Simpsons' AND Written_by = 'Todd Casey'))
SELECT * FROM Cartoon WHERE Channel NOT IN ('US', 'UK', 'FR', 'DE', 'IT', 'ES', 'NL', 'AU', 'CA', 'JP', 'BR', 'PT', 'RU', 'CN', 'KR', 'IN', 'TR', 'PL', 'SE', 'NO', 'FI', 'BE', 'HK', 'SG', 'TH', 'MY', 'PH', 'ID', 'GR', 'HU', 'RO', 'SK', 'CZ', 'UA', 'HU', 'PL', 'CY', 'LV', 'LT', 'EE', 'LU', 'MT', 'SI', 'IE', 'IS', 'MT', 'BG', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR', 'HR
SELECT "TV_Channel"."series_name", "TV_Channel"."Country" FROM "TV_Channel" INNER JOIN "TV_series" ON "TV_Channel"."id" = "TV_series"."Channel" INNER JOIN "Cartoon" ON "TV_series"."id" = "Cartoon"."id" WHERE "TV_series"."Directed_by" = 'Ben Jones' AND "TV_series"."Written_by" = 'Michael Chang'
SELECT "TV_Channel"."series_name", "TV_Channel"."Country" FROM "TV_Channel" INNER JOIN "TV_series" ON "TV_Channel"."id" = "TV_series"."Channel" WHERE "TV_series"."Directed_by" = 'Ben Jones' OR "TV_series"."Directed_by" = 'Michael Chang' OR "TV_series"."Written_by" = 'Ben Jones' OR "TV_series"."Written_by" = 'Michael Chang' OR "TV_series"."Original_air_date" = '1990-01-01' OR "TV_series"."Production_code" = '1990-01-01' GROUP BY "TV_Channel"."series_name", "TV_Channel"."Country" ORDER BY "TV_Channel"."series_name", "TV_Channel"."Country" \end{code}  Comment: I'm not sure what you're asking.  What is the series name and country of all TV channels
SELECT * FROM TV_Channel WHERE Language != 'English'
SELECT * FROM TV_Channel WHERE Language != 'English' AND Pixel_aspect_ratio_PAR != '1.333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333
SELECT * FROM TV_Channel WHERE Country = 'USA' AND Language = 'English' AND Content = 'Cartoon' AND Channel > 2;
SELECT * FROM TV_Channel WHERE Channel_id IN (SELECT Channel_id FROM TV_Channel WHERE Channel_id IN (SELECT Channel_id FROM TV_Channel WHERE Channel_id IN (SELECT Channel_id FROM TV_Channel WHERE Channel_id IN (SELECT Channel_id FROM TV_Channel WHERE Channel_id IN (SELECT Channel_id FROM TV_Channel WHERE Channel_id IN (SELECT Channel_id FROM TV_Channel WHERE Channel_id IN (SELECT Channel_id FROM TV_Channel WHERE Channel_id IN (SELECT Channel_id FROM TV_Channel WHERE Channel_id IN (SELECT Channel_id FROM TV_Channel WHERE Channel_id IN (SELECT Channel_id FROM TV_Channel WHERE Channel_id IN (SELECT Channel_id FROM TV_Channel WHERE Channel_id IN (SELECT Channel_id FROM TV_Channel WHERE Channel_id IN (SELECT Channel_id FROM TV_Channel WHERE Channel_id IN (SELECT Channel_id FROM TV_Channel WHERE Channel_id IN (SELECT Channel_id FROM TV_Channel WHERE Channel_id IN (SELECT Channel_id FROM TV_Channel WHERE Channel_id IN (SELECT Channel_id FROM TV_Channel WHERE Channel_id IN (SELECT Channel_id FROM TV
SELECT * FROM Cartoon WHERE Channel NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones'); \end{code}  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the table structure?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the table structure?  Comment: I'm asking how to write the query.  Comment: I've added an answer.  I'm not sure if it's what you're looking for.  Answer: \begin{code} SELECT * FROM Cartoon WHERE Channel NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones'); \end{code}  Comment: I'm getting this error: "ERROR:  column "Channel" must appear in the GROUP BY clause or be used in an aggregate function"  Comment: @user3072249 - I'm not sure
SELECT DISTINCT Channel FROM Cartoon WHERE Channel NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');
SELECT * FROM TV_Channel WHERE Channel NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones'); \end{code}  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the
SELECT * FROM TV_Channel WHERE Channel NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones'); \end{code}  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the
SELECT COUNT(*) FROM "poker_player"
SELECT COUNT(*) FROM "poker_player"
SELECT "Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings" FROM "poker_player" ORDER BY "Earnings" DESC
SELECT "Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings" FROM "poker_player" ORDER BY "Earnings" DESC
error
error
SELECT AVG(Earnings) FROM poker_player;
SELECT AVG(Earnings) FROM poker_player;
error
SELECT "Poker_Player_ID", "Best_Finish", "Money_Rank", "Earnings" FROM "poker_player" WHERE "Poker_Player_ID" = ( SELECT "Poker_Player_ID" FROM "poker_player" WHERE "Poker_Player_ID" = ( SELECT "Poker_Player_ID" FROM "poker_player" WHERE "Poker_Player_ID" = ( SELECT "Poker_Player_ID" FROM "poker_player" WHERE "Poker_Player_ID" = ( SELECT "Poker_Player_ID" FROM "poker_player" WHERE "Poker_Player_ID" = ( SELECT "Poker_Player_ID" FROM "poker_player" WHERE "Poker_Player_ID" = ( SELECT "Poker_Player_ID" FROM "poker_player" WHERE "Poker_Player_ID" = ( SELECT "Poker_Player_ID" FROM "poker_player" WHERE "Poker_Player_ID"
SELECT "Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings" FROM "poker_player" WHERE "Poker_Player_ID" > 0 AND "Earnings" < 200000 AND "Final_Table_Made" > 0 AND "Final_Table_Made" < 10 ORDER BY "Final_Table_Made" DESC LIMIT 1 \end{code}  Comment: I'm not sure what you're asking.  What is the maximum number of final tables made among poker players with earnings less than 200000?  Comment: I'm not sure what you're asking.  What is the maximum number of final tables made among poker players with earnings less than 200000?  Comment: I'm not sure what you're asking.  What is the maximum number of final tables made among poker players with earnings less than 200
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000 GROUP BY People_ID ORDER BY Final_Table_Made DESC \end{code}  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment:
SELECT "Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings" FROM "poker_player" WHERE "Poker_Player_ID" > 0 ORDER BY "Poker_Player_ID"
SELECT "Poker_Player_ID", "People_ID", "Name" FROM "poker_player"
SELECT * FROM "poker_player" WHERE "Earnings" > 300000;
SELECT * FROM "poker_player" WHERE "Earnings" > 300000;
SELECT "Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings" FROM "poker_player" ORDER BY "Final_Table_Made" ASC, "People_ID" ASC \end{code}  Comment: I'm not sure what you mean by "list the names of poker players ordered by the final tables made in ascending order".  Do you mean the names of the people who have made the most final tables?  Comment: @JonathanLeffler I'm not sure what you mean by "list the names of poker players ordered by the final tables made in ascending order". Do you mean the names of the people who have made the most final tables?  Comment: @JonathanLeffler I'm not sure what you mean by "list the names of poker players ordered by the final tables made in ascending order". Do you mean the names of the people who have made the most final tables?  Comment: @JonathanLeffler I'm not sure what you mean by "
SELECT "Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings" FROM "poker_player" ORDER BY "Final_Table_Made" ASC
error
SELECT "Poker_Player_ID", "People_ID", "Birth_Date" FROM "poker_player" WHERE "Poker_Player_ID" = ( SELECT MIN("Poker_Player_ID") FROM "poker_player" WHERE "Poker_Player_ID" > 0 AND "Poker_Player_ID" < 1000000 ) AND "People_ID" = ( SELECT MIN("People_ID") FROM "people" WHERE "People_ID" > 0 AND "People_ID" < 1000000 ) AND "Birth_Date" > ( SELECT MIN("Birth_Date") FROM "people" WHERE "People_ID" > 0 AND "People_ID" < 1000000 ) AND "Birth_Date" < ( SELECT MAX("Birth_Date") FROM "people" WHERE "People_ID" > 0 AND "People_ID" < 10000
error
SELECT "Poker_Player_ID", "Best_Finish", "Money_Rank", "Earnings" FROM "poker_player" WHERE "Poker_Player_ID" = ( SELECT "Poker_Player_ID" FROM "poker_player" WHERE "People_ID" = ( SELECT "People_ID" FROM "people" WHERE "Nationality" = 'USA' AND "Height" > 6'0" ) AND "Final_Table_Made" = 1 AND "Best_Finish" = 1 AND "Money_Rank" = 1 AND "Earnings" > 0 ) ORDER BY "Money_Rank" DESC LIMIT 1 \end{code}  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the schema?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query
SELECT "Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings" FROM "poker_player" WHERE "People_ID" > 200 GROUP BY "Poker_Player_ID", "People_ID" HAVING "Earnings" > 0 ORDER BY "Earnings" DESC \end{code}  Comment: I'm not sure what you're asking.  What is the average earnings of poker players with height higher than 200?  Comment: I'm not sure what you're asking.  What is the average earnings of poker players with height higher than 200?  Comment: I'm not sure what you're asking.  What is the average earnings of poker players with height higher than 200?  Comment: I'm not sure what you're asking.  What is the average earnings of poker players with height higher than 200?  Comment: I'm not sure
SELECT "Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings" FROM "poker_player" WHERE "People_ID" > 200 GROUP BY "Poker_Player_ID", "People_ID" HAVING "People_ID" > 200 ORDER BY "Poker_Player_ID", "People_ID" \end{code}  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?
SELECT "Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings" FROM "poker_player" ORDER BY "Earnings" DESC
SELECT "Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings" FROM "poker_player" ORDER BY "Earnings" DESC \end{code}  Comment: I'm not sure what you mean by "the names of poker players sorted by their earnings descending".  Do you mean the names of the people who have played in the final table?  Or the names of the people who have won the most money?  Comment: I mean the names of the people who have played in the final table.  Comment: I'm not sure what you mean by "the names of poker players sorted by their earnings descending".  Do you mean the names of the people who have played in the final table?  Or the names of the people who have won the most money?  Comment: I mean the names of the people who have played in the final table.  Comment: I've updated my answer.  I'm not sure if this is what you want, but it's the best I can do.
error
SELECT COUNT(*) FROM people WHERE Nationality = 'USA'
error
error
error
SELECT DISTINCT "Nationality" FROM "people" WHERE "People_ID" IN ( SELECT "People_ID" FROM "people" WHERE "Nationality" = 'USA' ) \end{code}  Comment: I'm not sure what you mean by "two or more people".  Do you mean two or more people with the same nationality?  Comment: @JonathanLeffler: Yes, that's what I mean.  Comment: @JonathanLeffler: I've updated the question to make it clearer.  Comment: @JonathanLeffler: I've updated the question to make it clearer.  Comment: @JonathanLeffler: I've updated the question to make it clearer.  Comment: @JonathanLeffler: I've updated the question to make it clearer.  Comment: @JonathanLeffler: I've updated the question to make it clearer.  Comment: @JonathanLeffler: I've updated the question to make it clearer.  Comment: @JonathanLeffler: I'
SELECT * FROM people ORDER BY name ASC;
SELECT "People_ID", "Name", "Birth_Date" FROM "people" ORDER BY "Name" ASC
SELECT * FROM people WHERE Nationality != "Russia";
SELECT * FROM people WHERE Nationality != 'Russia';
SELECT * FROM people WHERE people.People_ID NOT IN (SELECT people.People_ID FROM poker_player);
SELECT * FROM people WHERE "People_ID" NOT IN (SELECT "People_ID" FROM "poker_player");
SELECT DISTINCT "Nationality" FROM "people"
error
SELECT COUNT(*) FROM `AREA_CODE_STATE`;
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC
SELECT * FROM VOTES;
error
SELECT * FROM VOTES WHERE state = 'CA' ORDER BY created DESC LIMIT 1;
SELECT CONTESTANT_NUMBER FROM CONTESTANTS WHERE CONTESTANT_NAME <> 'Jessie Alloway'
SELECT DISTINCT state, created FROM VOTES ORDER BY created DESC
SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE CONTESTANT_NUMBER IN (   SELECT contestant_number   FROM VOTES   GROUP BY contestant_number   HAVING COUNT(*) > 1 ) \end{code}  Comment: I'm not sure what you mean by "contestant numbers and names of the contestants who had at least two votes".  Do you mean the contestants who had at least two votes for them?  Comment: @JonathanLeffler I'm not sure what you mean by "contestant numbers and names of the contestants who had at least two votes". Do you mean the contestants who had at least two votes for them?  Comment: @JonathanLeffler I'm not sure what you mean by "contestant numbers and names of the contestants who had at least two votes". Do you mean the contestants who had at least two votes for them?  Comment: @JonathanLeffler I'm not sure what you mean by "contestant numbers and names of the contestants who had at least two votes".
SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE votes.contestant_number = contestant_number GROUP BY contestant_number ORDER BY votes.contestant_number DESC LIMIT 1; \end{code}  Comment: I'm not sure what you're asking.  Are you asking how to get the contestant number and name of the contestant who got the least votes?  Comment: Yes, that is what I am asking.  Comment: I've added an answer.  Answer: You can use the following query:  \begin{code} SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE votes.contestant_number = contestant_number GROUP BY contestant_number ORDER BY votes.contestant_number DESC LIMIT 1; \end{code}  Comment: I'm getting an error: "SQLSTATE[42S22]: Column not found: 1054 Unknown column 'votes.contestant_number' in 'where clause'"  Comment: @user
SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA'
SELECT COUNT(*) FROM VOTES WHERE VOTES.contestant_number IS NULL
SELECT * FROM VOTES WHERE state = '01'
SELECT * FROM VOTES WHERE CONTESTANT_NUMBER = 'Tabatha Gehling'
SELECT DISTINCT `state` FROM `VOTES` WHERE `contestant_number` = 1 AND `contestant_number` = 2 AND `state` IN (   '209',   '213',   '214',   '215',   '216',   '217',   '218',   '219',   '220',   '221',   '222',   '223',   '224',   '225',   '226',   '227',   '228',   '229',   '230',   '231',   '232',   '233',   '234',   '235',   '236',   '237',   '238',   '239',   '240',   '241',
SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_name LIKE 'Al%'
SELECT * FROM country WHERE IndepYear > 1950;
CREATE TABLE `country_foundation` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Year` integer NOT NULL DEFAULT '0' ,  PRIMARY KEY (`CountryCode`,`Year`) )  CREATE TABLE `country_foundation_details` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Year` integer NOT NULL DEFAULT '0' ,  `Founder` char(30) NOT NULL DEFAULT '' ,  `FounderNationality` char(30) NOT NULL DEFAULT '' ,  `FounderGender` char(30) NOT NULL DEFAULT '' ,  `FounderBirthDate` char(10) NOT NULL DEFAULT '' ,  `FounderDeathDate` char(10) NOT NULL DEFAULT '' ,  `FounderBirthPlace` char(30) NOT NULL DEFAULT '' ,  `FounderDeathPlace` char(30) NOT NULL DEFAULT '' ,  `FounderBirthCountry` char(3) NOT NULL DEFAULT '' ,  `FounderDeathCountry` char(3) NOT NULL DEFAULT ''
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'R'
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean'
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Carribean'
SELECT * FROM country WHERE Continent = 'Asia'
SELECT * FROM country WHERE Code = 'AIA';
SELECT * FROM city WHERE Name = 'Kabul'
SELECT * FROM country WHERE Code = 'AFG'
SELECT * FROM countrylanguage WHERE CountryCode = 'AW' AND Language = 'Papiamento'
SELECT * FROM countrylanguage WHERE CountryCode = 'ABW' AND Language = 'Papiamento'
SELECT * FROM `country` WHERE `Code` = 'BR'
SELECT * FROM `country` WHERE `Code` = 'BR'
SELECT * FROM `country` WHERE `Code` = 'AO'
SELECT * FROM country WHERE Code = 'AO'
SELECT   `CountryCode`,   `Name`,   `Continent`,   `Region`,   `SurfaceArea`,   `IndepYear`,   `Population`,   `LifeExpectancy`,   `GNP`,   `GNPOld`,   `LocalName`,   `GovernmentForm`,   `HeadOfState`,   `Capital`,   `Code2`,   `CountryLanguage`.`Language`,   `CountryLanguage`.`IsOfficial`,   `CountryLanguage`.`Percentage` FROM   `country` LEFT JOIN   `countrylanguage` ON   `country`.`Code` = `countrylanguage`.`CountryCode` WHERE   `Continent` = 'Africa' AND   `Region` = 'Central Africa' ORDER BY   `CountryCode`
SELECT * FROM country WHERE Continent = 'Africa' AND Region = 'Central' AND LifeExpectancy IS NOT NULL;
SELECT * FROM country WHERE LifeExpectancy < 60 ORDER BY LifeExpectancy ASC LIMIT 1
SELECT * FROM country WHERE LifeExpectancy < 60;
SELECT   CountryCode,   Name,   Continent,   Region,   SurfaceArea,   IndepYear,   Population,   LifeExpectancy,   GNP,   GNPOld,   LocalName,   GovernmentForm,   HeadOfState,   Capital,   Code2,   Language,   IsOfficial,   Percentage FROM   country WHERE   Continent = 'Asia' ORDER BY   CountryCode
SELECT * FROM country WHERE Continent = 'Asia' SELECT * FROM countrylanguage WHERE CountryCode = 'CN' SELECT * FROM countrylanguage WHERE CountryCode = 'IN' SELECT * FROM countrylanguage WHERE CountryCode = 'ID' SELECT * FROM countrylanguage WHERE CountryCode = 'JP' SELECT * FROM countrylanguage WHERE CountryCode = 'KR' SELECT * FROM countrylanguage WHERE CountryCode = 'TW' SELECT * FROM countrylanguage WHERE CountryCode = 'VN' SELECT * FROM countrylanguage WHERE CountryCode = 'CN' SELECT * FROM countrylanguage WHERE CountryCode = 'IN' SELECT * FROM countrylanguage WHERE CountryCode = 'ID' SELECT * FROM countrylanguage WHERE CountryCode = 'JP' SELECT * FROM countrylanguage WHERE CountryCode = 'KR' SELECT * FROM countrylanguage WHERE CountryCode = 'TW' SELECT * FROM countrylanguage WHERE CountryCode = 'VN' SELECT * FROM countrylanguage WHERE CountryCode = 'CN' SELECT * FROM countrylanguage WHERE CountryCode = 'IN' SELECT * FROM countrylanguage WHERE CountryCode = 'ID' SELECT * FROM countrylanguage WHERE CountryCode = 'JP' SELECT *
SELECT   CountryCode,   Name,   Continent,   Region,   SurfaceArea,   IndepYear,   Population,   LifeExpectancy,   GNP,   GNPOld,   LocalName,   GovernmentForm,   HeadOfState,   Capital,   Code2,   (SELECT     CountryCode,     Name,     Continent,     Region,     SurfaceArea,     IndepYear,     Population,     LifeExpectancy,     GNP,     GNPOld,     LocalName,     GovernmentForm,     HeadOfState,     Capital,     Code2   FROM     countrylanguage   WHERE     CountryCode = CountryCode   ORDER BY     LifeExpectancy DESC) AS AverageLifeExpectancy FROM   country WHERE   CountryCode IN ('AF','AE','AL','DZ','EG','ET','IL','JO','KE','KM','LB','LY','MA','MR','MZ','OM','SD','SO','SS','SY','TD','TN
SELECT   CountryCode,   Name,   Continent,   Region,   SurfaceArea,   IndepYear,   Population,   LifeExpectancy,   GNP,   GNPOld,   LocalName,   GovernmentForm,   HeadOfState,   Capital,   Code2,   Language,   IsOfficial,   Percentage FROM   country WHERE   CountryCode IN ('AF','AE','AL','DZ','EG','ET','IL','JO','KE','KM','LB','LY','MA','MR','MZ','OM','SD','SO','SS','SY','TD','TN','UG','ZA','ZM','ZW') AND   GovernmentForm = 'Republic' AND   LifeExpectancy IS NOT NULL AND   Percentage IS NOT NULL GROUP BY   CountryCode,   Name,   Continent,   Region,   SurfaceArea,   IndepYear,   Population,   LifeExpectancy,   GNP,   GNPOld,
SELECT sum(surfacearea) FROM country WHERE continent='Asia' OR continent='Europe'
SELECT SurfaceArea FROM country WHERE Continent = 'Asia'  SELECT SurfaceArea FROM country WHERE Continent = 'Europe'
SELECT * FROM city WHERE District = 'Gelderland'
SELECT * FROM city WHERE District = 'Gelderland'
SELECT   CountryCode,   Name,   Continent,   Region,   SurfaceArea,   IndepYear,   Population,   LifeExpectancy,   GNP,   GNPOld,   LocalName,   GovernmentForm,   HeadOfState,   Capital,   Code2,   Language,   IsOfficial,   Percentage FROM   country WHERE   CountryCode IN (     SELECT       CountryCode     FROM       countrylanguage     WHERE       Language IN ('en', 'fr', 'de', 'es', 'it', 'pt', 'ru', 'zh', 'ja')   ) ORDER BY   GNP DESC
SELECT   COUNT(DISTINCT CountryCode) AS Count,   SUM(GNP) AS GNP,   SUM(Population) AS Population FROM   country WHERE   CountryCode IN ('US', 'PR', 'VI', 'AS', 'FM', 'GU', 'MP', 'PW', 'AS', 'MH', 'UM', 'AS', 'GU', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', 'AS', '
SELECT COUNT(DISTINCT Language) FROM countrylanguage
SELECT COUNT(DISTINCT Language) FROM countrylanguage
SELECT COUNT(DISTINCT CountryCode) FROM country WHERE Continent = 'Africa' AND GovernmentForm != 'Federal'
SELECT COUNT(DISTINCT country.Name) FROM country WHERE continent = 'Africa' AND country.GovernmentForm != ''
SELECT COUNT(*) FROM `countrylanguage` WHERE `CountryCode` = 'ABW'
SELECT * FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT * FROM countrylanguage WHERE CountryCode = 'AF'  CREATE TABLE `country_district` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `District` char(20) NOT NULL DEFAULT '' ,  PRIMARY KEY (`CountryCode`,`District`) ,  CONSTRAINT `country_district_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`) )
SELECT * FROM countrylanguage WHERE CountryCode = 'AF' AND IsOfficial = 'T'
CREATE TABLE `countrylanguage` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Language` char(30) NOT NULL DEFAULT '' ,  `IsOfficial` text  NOT NULL DEFAULT 'F' ,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0' ,  PRIMARY KEY (`CountryCode`,`Language`) ,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`) )  CREATE TABLE `countrylanguage` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Language` char(30) NOT NULL DEFAULT '' ,  `IsOfficial` text  NOT NULL DEFAULT 'F' ,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0' ,  PRIMARY KEY (`CountryCode`,`Language`) ,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`) )  CREATE TABLE `countrylanguage
SELECT * FROM countrylanguage ORDER BY Percentage DESC LIMIT 1
SELECT * FROM countrylanguage ORDER BY SUM(Percentage) DESC
SELECT * FROM countrylanguage ORDER BY Percentage DESC
SELECT * FROM countrylanguage WHERE CountryCode = 'GB' AND Language = 'NL'  CREATE TABLE `countrylanguage` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Language` char(30) NOT NULL DEFAULT '' ,  `IsOfficial` text  NOT NULL DEFAULT 'F' ,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0' ,  PRIMARY KEY (`CountryCode`,`Language`) ,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`) )
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'English' AND Language = 'Dutch'
SELECT * FROM countrylanguage WHERE CountryCode = 'GB' AND Language = 'EN'  SELECT * FROM countrylanguage WHERE CountryCode = 'CA' AND Language = 'FR'  SELECT * FROM countrylanguage WHERE CountryCode = 'FR' AND Language = 'EN'  SELECT * FROM countrylanguage WHERE CountryCode = 'FR' AND Language = 'FR'  SELECT * FROM countrylanguage WHERE CountryCode = 'GB' AND Language = 'FR'  SELECT * FROM countrylanguage WHERE CountryCode = 'GB' AND Language = 'EN'  SELECT * FROM countrylanguage WHERE CountryCode = 'CA' AND Language = 'EN'  SELECT * FROM countrylanguage WHERE CountryCode = 'FR' AND Language = 'FR'  SELECT * FROM countrylanguage WHERE CountryCode = 'GB' AND Language = 'FR'  SELECT * FROM countrylanguage WHERE CountryCode = 'GB' AND Language = 'EN'  SELECT * FROM countrylanguage WHERE CountryCode = 'CA' AND Language = 'FR'  SELECT * FROM countrylanguage WHERE CountryCode = 'FR' AND Language = 'EN'  SELECT * FROM countrylanguage WHERE CountryCode = 'GB' AND Language = '
SELECT * FROM countrylanguage WHERE CountryCode = 'GB' AND Language = 'EN'  SELECT * FROM countrylanguage WHERE CountryCode = 'CA' AND Language = 'FR'  SELECT * FROM countrylanguage WHERE CountryCode = 'FR' AND Language = 'EN'  SELECT * FROM countrylanguage WHERE CountryCode = 'FR' AND Language = 'FR'  SELECT * FROM countrylanguage WHERE CountryCode = 'GB' AND Language = 'FR'  SELECT * FROM countrylanguage WHERE CountryCode = 'GB' AND Language = 'EN'  SELECT * FROM countrylanguage WHERE CountryCode = 'CA' AND Language = 'EN'  SELECT * FROM countrylanguage WHERE CountryCode = 'FR' AND Language = 'FR'  SELECT * FROM countrylanguage WHERE CountryCode = 'GB' AND Language = 'FR'  SELECT * FROM countrylanguage WHERE CountryCode = 'GB' AND Language = 'EN'  SELECT * FROM countrylanguage WHERE CountryCode = 'CA' AND Language = 'FR'  SELECT * FROM countrylanguage WHERE CountryCode = 'FR' AND Language = 'EN'  SELECT * FROM countrylanguage WHERE CountryCode = 'GB' AND Language = '
CREATE TABLE `countrylanguage` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Language` char(30) NOT NULL DEFAULT '' ,  `IsOfficial` text  NOT NULL DEFAULT 'F' ,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0' ,  PRIMARY KEY (`CountryCode`,`Language`) ,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`) )
CREATE TABLE `countrylanguage` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Language` char(30) NOT NULL DEFAULT '' ,  `IsOfficial` text  NOT NULL DEFAULT 'F' ,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0' ,  PRIMARY KEY (`CountryCode`,`Language`) ,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`) )
SELECT COUNT(DISTINCT continent) FROM countrylanguage WHERE Language = 'Chinese' AND continent != 'Asia'
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Chinese' AND IsOfficial = 'T'
SELECT * FROM countrylanguage WHERE Language IN ('English','Dutch')
SELECT * FROM countrylanguage WHERE Language = 'Dutch' OR Language = 'English'
CREATE TABLE `countrylanguage_english` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Language` char(30) NOT NULL DEFAULT '' ,  `IsOfficial` text  NOT NULL DEFAULT 'F' ,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0' ,  PRIMARY KEY (`CountryCode`,`Language`) ,  CONSTRAINT `countryLanguage_english_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `countrylanguage` (`CountryCode`) )  CREATE TABLE `countrylanguage_dutch` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Language` char(30) NOT NULL DEFAULT '' ,  `IsOfficial` text  NOT NULL DEFAULT 'F' ,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0' ,  PRIMARY KEY (`CountryCode`,`Language`) ,  CONSTRAINT `countryLanguage_dutch_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `
SELECT * FROM countrylanguage WHERE IsOfficial = 'F' AND Language IN ('ENG','DUT')  CREATE TABLE `countrylanguage` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Language` char(30) NOT NULL DEFAULT '' ,  `IsOfficial` text  NOT NULL DEFAULT 'F' ,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0' ,  PRIMARY KEY (`CountryCode`,`Language`) ,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`) )
SELECT * FROM countrylanguage WHERE CountryCode = 'CN' AND Language = 'zh'
SELECT * FROM countrylanguage WHERE CountryCode IN ('CN','TW','ID','MY','PH','TH','VN','KR','IN','ID','MY','PH','TH','VN','KR','IN','ID','MY','PH','TH','VN','KR','IN','ID','MY','PH','TH','VN','KR','IN','ID','MY','PH','TH','VN','KR','IN','ID','MY','PH','TH','VN','KR','IN','ID','MY','PH','TH','VN','KR','IN','ID','MY','PH','TH','VN','KR','IN','ID','MY','PH','TH','VN','KR','IN','ID','MY','PH','TH','VN','KR','IN','ID','MY','PH','TH','VN','KR','IN','ID','MY','PH','TH','VN','KR','IN','ID','MY','PH','TH','VN','KR','IN','ID','MY','PH','TH','VN','KR','IN','ID','MY','PH','TH','VN','KR','IN','ID','
SELECT * FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode = 'US'
CREATE TABLE `country_language_usage` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Language` char(30) NOT NULL DEFAULT '' ,  `IsOfficial` text  NOT NULL DEFAULT 'F' ,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0' ,  PRIMARY KEY (`CountryCode`,`Language`) ,  CONSTRAINT `country_language_usage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`) )  CREATE TABLE `country_language_usage_details` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Language` char(30) NOT NULL DEFAULT '' ,  `IsOfficial` text  NOT NULL DEFAULT 'F' ,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0' ,  `Details` text  NOT NULL DEFAULT '' ,  PRIMARY KEY (`CountryCode`,`Language`) ,  CONSTRAINT `country_language_usage_details_ibfk_1`
SELECT * FROM city WHERE Language = 'English' ORDER BY Population DESC LIMIT 1
SELECT * FROM city WHERE English = '1' ORDER BY Population DESC LIMIT 1
SELECT * FROM country WHERE Continent = 'Asia' AND SurfaceArea > (SELECT SurfaceArea FROM country WHERE Continent = 'Asia');
SELECT * FROM country WHERE Continent = 'Asia' AND Population > 1000000000 ORDER BY Population DESC LIMIT 1
SELECT   CountryCode,   Name,   Continent,   Region,   SurfaceArea,   IndepYear,   Population,   LifeExpectancy,   GNP,   GNPOld,   LocalName,   GovernmentForm,   HeadOfState,   Capital,   Code2,   Language,   IsOfficial,   Percentage FROM   country   LEFT JOIN countrylanguage ON CountryCode = CountryCode WHERE   Language <> 'English' ORDER BY   LifeExpectancy DESC
SELECT   CountryCode,   SUM(Population) AS Population,   SUM(LifeExpectancy) AS LifeExpectancy,   SUM(GNP) AS GNP,   SUM(GNPOld) AS GNPOld,   SUM(Population)/SUM(GNP) AS GNPPerCapita,   SUM(Population)/SUM(GNPOld) AS GNPOldPerCapita,   SUM(Population)/SUM(LifeExpectancy) AS LifeExpectancyPerCapita,   SUM(Population)/SUM(GNP)/SUM(LifeExpectancy) AS GNPPerCapitaLifeExpectancy FROM   country WHERE   CountryCode NOT IN ('GB', 'US', 'CA', 'AU', 'NZ', 'ZA', 'IE', 'IN', 'MY', 'SG', 'PH', 'TH', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID
SELECT COUNT(*) FROM country WHERE Language NOT IN ('en','fr','de','es','it','pt','ru','zh','ja','ko','ar','hi','nl','no','sv','da','fi','pl','tr','th','vi','el','bg','hu','mk','sl','ro','sk','lt','cs','et','lv','hr','is','eu','mt','cy','gl','hr','lt','lv','mk','sl','ro','sk','cs','et','lv','hr','is','eu','mt','cy','gl','hr','lt','lv','mk','sl','ro','sk','cs','et','lv','hr','is','eu','mt','cy','gl','hr','lt','lv','mk','sl','ro','sk','cs','et','lv','hr','is','eu','mt','cy','gl','hr','lt','lv','mk','sl','ro','sk','cs','et','lv','hr','is','eu','mt','cy','gl','hr','lt','lv','mk','sl','ro','sk','cs','et','lv','hr','is','eu','mt','cy','gl','hr','lt','lv','mk','sl','
SELECT COUNT(*) FROM countrylanguage WHERE Language NOT LIKE 'English'
CREATE TABLE `country_language_code` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `LanguageCode` char(3) NOT NULL DEFAULT '' ,  PRIMARY KEY (`CountryCode`,`LanguageCode`) ,  CONSTRAINT `country_language_code_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`) )
CREATE TABLE `country_language` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Language` char(30) NOT NULL DEFAULT '' ,  `IsOfficial` text  NOT NULL DEFAULT 'F' ,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0' ,  PRIMARY KEY (`CountryCode`,`Language`) ,  CONSTRAINT `country_language_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`) )  CREATE TABLE `country_language_language` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Language` char(30) NOT NULL DEFAULT '' ,  PRIMARY KEY (`CountryCode`,`Language`) ,  CONSTRAINT `country_language_language_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country_language` (`CountryCode`) )  CREATE TABLE `country_language_language_language` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Language
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode < 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode < 1930
SELECT * FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
SELECT * FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
SELECT * FROM country WHERE Population < (SELECT Population FROM country WHERE Continent = 'Asia');
SELECT * FROM country WHERE Population < (SELECT Population FROM country WHERE Continent = 'Asia')
SELECT * FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');
SELECT * FROM country WHERE Continent = 'Asia' AND Population > (SELECT Population FROM country WHERE Continent = 'Africa');
SELECT * FROM countrylanguage WHERE Language NOT LIKE 'English'
SELECT CountryCode FROM countrylanguage WHERE Language NOT LIKE 'English'
SELECT * FROM countrylanguage WHERE Language != 'English'  CREATE TABLE `country_language_code` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `LanguageCode` char(3) NOT NULL DEFAULT '' ,  PRIMARY KEY (`CountryCode`,`LanguageCode`) ,  CONSTRAINT `country_language_code_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`) ,  CONSTRAINT `country_language_code_ibfk_2` FOREIGN KEY (`LanguageCode`) REFERENCES `language` (`Code`) )
CREATE TABLE `countrylanguage` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Language` char(30) NOT NULL DEFAULT '' ,  `IsOfficial` text  NOT NULL DEFAULT 'F' ,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0' ,  PRIMARY KEY (`CountryCode`,`Language`) ,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`) )  CREATE TABLE `countrylanguage` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Language` char(30) NOT NULL DEFAULT '' ,  `IsOfficial` text  NOT NULL DEFAULT 'F' ,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0' ,  PRIMARY KEY (`CountryCode`,`Language`) ,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`) )  CREATE TABLE `countrylanguage
SELECT * FROM country WHERE Language != 'English' AND GovernmentForm != 'Republic'
SELECT * FROM country WHERE Language NOT IN ('English') AND GovernmentForm NOT IN ('Republic')
SELECT * FROM city WHERE CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
SELECT * FROM `city` WHERE `CountryCode` NOT IN ('GB', 'US', 'CA', 'AU', 'NZ', 'ZA', 'IE', 'SG', 'MY', 'PH', 'ID', 'TH', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', 'ID', '
SELECT * FROM city WHERE CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Chinese' AND IsOfficial = 'F')
SELECT * FROM `city` WHERE `CountryCode` = 'CN' AND `Language` = 'zh'
SELECT * FROM country WHERE Population < (SELECT MIN(Population) FROM country)
SELECT * FROM country WHERE Population = (SELECT MIN(Population) FROM country);
SELECT * FROM country WHERE SurfaceArea > 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT * FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT   CountryCode,   Name,   COUNT(Language) AS Languages FROM   Country INNER JOIN   CountryLanguage ON CountryCode = CountryLanguage.CountryCode GROUP BY   CountryCode,   Name HAVING   COUNT(Language) >= 3 ORDER BY   CountryCode,   Name \end{code}  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the
CREATE TABLE `countrylanguage` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Language` char(30) NOT NULL DEFAULT '' ,  `IsOfficial` text  NOT NULL DEFAULT 'F' ,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0' ,  PRIMARY KEY (`CountryCode`,`Language`) ,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`) )  CREATE TABLE `countrylanguage` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Language` char(30) NOT NULL DEFAULT '' ,  `IsOfficial` text  NOT NULL DEFAULT 'F' ,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0' ,  PRIMARY KEY (`CountryCode`,`Language`) ,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`) )  CREATE TABLE `countrylanguage
SELECT DISTINCT District, COUNT(*) FROM city GROUP BY District
SELECT DISTINCT(DISTRICT) FROM CITY GROUP BY DISTRICT HAVING COUNT(DISTRICT) > (SELECT AVG(DISTRICT) FROM CITY)
SELECT * FROM country WHERE LifeExpectancy > 72 AND GovernmentForm != 'Democracy'
SELECT * FROM country WHERE LifeExpectancy > 72 AND GovernmentForm != 'Democracy'
SELECT   CONTINENT,   AVG(LifeExpectancy),   COUNT(DISTINCT CountryCode) FROM   country WHERE   LifeExpectancy < 72 GROUP BY   CONTINENT ORDER BY   CONTINENT \end{code}  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?  Comment: I'm asking how to write the query.  Comment: I'm not sure what you're asking.  Are you asking how to write the query?  Or are you asking how to write the SQL?
SELECT   CONTINENT,   COUNT(DISTINCT CONTINENT),   SUM(POPULATION),   SUM(LIFEEXPECTANCY) FROM   (     SELECT       CONTINENT,       POPULATION,       LIFEEXPECTANCY     FROM       (         SELECT           CONTINENT,           POPULATION,           LIFEEXPECTANCY         FROM           (             SELECT               CONTINENT,               POPULATION,               LIFEEXPECTANCY             FROM               (                 SELECT                   CONTINENT,                   POPULATION,                   LIFEEXPECTANCY                 FROM                   (                     SELECT                       CONTINENT,                       POPULATION,                       LIFEEXPECTANCY                     FROM                       (                         SELECT                           CONTINENT,                           POPULATION,                           LIFEEXPE
SELECT * FROM country ORDER BY SurfaceArea DESC LIMIT 5
SELECT Name, SurfaceArea FROM Country ORDER BY SurfaceArea DESC LIMIT 5
SELECT * FROM country WHERE Population > 1000000000 ORDER BY Population DESC LIMIT 3
SELECT CountryCode, Name FROM Country ORDER BY Population DESC LIMIT 3
SELECT * FROM country WHERE Population < 1000000000 ORDER BY Population DESC LIMIT 3
SELECT * FROM country WHERE Population < 1000000000 ORDER BY Population DESC LIMIT 3;
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'
SELECT * FROM country WHERE Continent = 'Europe' AND Population > 80000
SELECT * FROM country WHERE Population = 80000 AND Continent = 'Europe'
SELECT   COUNT(DISTINCT CountryCode) AS TotalPopulation,   AVG(Population) AS AveragePopulation,   AVG(SurfaceArea) AS AverageArea FROM   Country WHERE   Continent = 'North America'   AND SurfaceArea > 3000 GROUP BY   Continent ORDER BY   AveragePopulation DESC
SELECT   COUNT(DISTINCT CountryCode) AS TotalPopulation,   AVG(SurfaceArea) AS AverageSurfaceArea FROM   Country WHERE   Continent = 'North America'   AND SurfaceArea > 3000 GROUP BY   Continent ORDER BY   AverageSurfaceArea DESC
SELECT * FROM city WHERE Population BETWEEN 160000 AND 900000
SELECT * FROM city WHERE population BETWEEN 160000 AND 900000;
SELECT * FROM countrylanguage ORDER BY `Percentage` DESC LIMIT 1  CREATE TABLE `country_district` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `District` char(20) NOT NULL DEFAULT '' ,  PRIMARY KEY (`CountryCode`,`District`) ,  CONSTRAINT `country_district_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`) )  CREATE TABLE `country_district_population` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `District` char(20) NOT NULL DEFAULT '' ,  `Population` integer NOT NULL DEFAULT '0' ,  PRIMARY KEY (`CountryCode`,`District`) ,  CONSTRAINT `country_district_population_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`) )  CREATE TABLE `country_district_population_2` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,
SELECT * FROM countrylanguage WHERE IsOfficial = 'T' ORDER BY Percentage DESC LIMIT 1
CREATE TABLE `countrylanguage` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Language` char(30) NOT NULL DEFAULT '' ,  `IsOfficial` text  NOT NULL DEFAULT 'F' ,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0' ,  PRIMARY KEY (`CountryCode`,`Language`) ,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`) )  CREATE TABLE `countrylanguage` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Language` char(30) NOT NULL DEFAULT '' ,  `IsOfficial` text  NOT NULL DEFAULT 'F' ,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0' ,  PRIMARY KEY (`CountryCode`,`Language`) ,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`) )  CREATE TABLE `countrylanguage
CREATE TABLE `country_language` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Language` char(30) NOT NULL DEFAULT '' ,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0' ,  PRIMARY KEY (`CountryCode`,`Language`) ,  CONSTRAINT `country_language_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`) )  CREATE TABLE `country_language_language` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Language` char(30) NOT NULL DEFAULT '' ,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0' ,  PRIMARY KEY (`CountryCode`,`Language`) ,  CONSTRAINT `country_language_language_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country_language` (`CountryCode`) ,  CONSTRAINT `country_language_language_ibfk_2` FOREIGN KEY (`Language`) REFER
SELECT * FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' AND Percentage > 0.5
SELECT COUNT(*) FROM `countrylanguage` WHERE `Language` = 'Spanish' AND `IsOfficial` = 'T'
SELECT * FROM countrylanguage WHERE IsOfficial = 'T' AND Language = 'es' AND Percentage > 0.5  CREATE TABLE `countrylanguage` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Language` char(30) NOT NULL DEFAULT '' ,  `IsOfficial` text  NOT NULL DEFAULT 'F' ,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0' ,  PRIMARY KEY (`CountryCode`,`Language`) ,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`) )
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish'  CREATE TABLE `countrylanguage` (   `CountryCode` char(3) NOT NULL DEFAULT '' ,  `Language` char(30) NOT NULL DEFAULT '' ,  `IsOfficial` text  NOT NULL DEFAULT 'F' ,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0' ,  PRIMARY KEY (`CountryCode`,`Language`) ,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`) )
SELECT COUNT(*) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT * FROM conductor ORDER BY Age ASC;
SELECT conductor.Name, conductor.Age FROM conductor ORDER BY conductor.Age
SELECT * FROM conductor WHERE Nationality != 'USA';
SELECT "Name" FROM "conductor" WHERE "Nationality" != "USA";
SELECT * FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT "Record_Company" FROM "orchestra" ORDER BY "Year_of_Founded" DESC
SELECT AVG(Attendance) FROM Show;
SELECT AVG(Attendance) FROM Show;
error
SELECT MAX(Share) AS MaxShare, MIN(Share) AS MinShare FROM performance WHERE Type <> "Live final" GROUP BY Type \end{code}  Comment: I'm not sure what you're asking.  Can you explain what you're trying to do?  Comment: I'm trying to get the maximum and minimum share for performances that do not have the type "Live final".  Comment: I'm not sure what you mean by "maximum and minimum share".  Do you mean the maximum and minimum values of the column "Share"?  Comment: Yes, I mean the maximum and minimum values of the column "Share".  Comment: I've updated my answer.  I'm not sure if this is what you're looking for, but it should be a good start.  Answer: \begin{code} SELECT MAX(Share) AS MaxShare, MIN(Share) AS MinShare FROM performance WHERE Type <> "Live final" GROUP BY Type \end{code}  Comment: I'm getting the following error: "ERROR
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT "conductor"."Name", "conductor"."Year_of_Work" FROM "conductor" ORDER BY "conductor"."Year_of_Work" DESC
SELECT "conductor"."Name", COUNT("conductor"."Year_of_Work") AS "Years_Worked" FROM "conductor" GROUP BY "conductor"."Name" ORDER BY "Years_Worked" DESC
SELECT "conductor"."Name" FROM "conductor" WHERE "conductor"."Year_of_Work" = (SELECT MAX("conductor"."Year_of_Work") FROM "conductor" GROUP BY "conductor"."Name")
SELECT "conductor"."Name", "conductor"."Age", "conductor"."Nationality", "conductor"."Year_of_Work" FROM "conductor" GROUP BY "conductor"."Name", "conductor"."Age", "conductor"."Nationality", "conductor"."Year_of_Work" ORDER BY "conductor"."Year_of_Work" DESC
SELECT "conductor"."Name", "orchestra"."Orchestra" FROM "conductor" INNER JOIN "orchestra" ON "conductor"."Conductor_ID" = "orchestra"."Conductor_ID" ORDER BY "conductor"."Name", "orchestra"."Orchestra"
SELECT conductor.Name, orchestra.Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT DISTINCT Conductor_ID FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID INNER JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID INNER JOIN show ON performance.Performance_ID = show.Performance_ID WHERE orchestra.Orchestra_ID IS NOT NULL AND performance.Performance_ID IS NOT NULL AND show.Show_ID IS NOT NULL AND performance.Performance_ID <> show.Performance_ID AND performance.Performance_ID <> show.Performance_ID AND performance.Performance_ID <> show.Performance_ID AND performance.Performance_ID <> show.Performance_ID AND performance.Performance_ID <> show.Performance_ID AND performance.Performance_ID <> show.Performance_ID AND performance.Performance_ID <> show.Performance_ID AND performance.Performance_ID <> show.Performance_ID AND performance.Performance_ID <> show.Performance_ID AND performance.Performance_ID <> show.Per
SELECT * FROM conductor WHERE conductor.Name IN ( SELECT conductor.Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1 )
SELECT conductor.Name, count(orchestra.Orchestra_ID) FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY count(orchestra.Orchestra_ID) DESC \end{code}  Comment: I'm not sure what you mean by "the most number of orchestras".  Do you mean the conductor who has conducted the most orchestras?  Or the conductor who has conducted the most orchestras in the most shows?  Or the conductor who has conducted the most orchestras in the most shows in the most weeks?  Or the conductor who has conducted the most orchestras in the most shows in the most weeks in the most shows?  Or the conductor who has conducted the most orchestras in the most shows in the most weeks in the most shows in the most weeks?  Comment: I mean the conductor who has conducted the most orchestras.  Comment: @JonathanLeffler I'm not sure what you mean by "the most number of orchestras
SELECT conductor.Name, conductor.Age, conductor.Nationality, orchestra.Orchestra, orchestra.Year_of_Founded, orchestra.Major_Record_Format, orchestra.Record_Company, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Result, show.Attendance FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID INNER JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID INNER JOIN show ON performance.Performance_ID = show.Performance_ID WHERE orchestra.Year_of_Founded > 1950 AND orchestra.Year_of_Founded < 2000 AND orchestra.Major_Record_Format = 'LP' AND orchestra.Record_Company = 'Decca' AND orchestra.Record
SELECT * FROM conductor WHERE Year_of_Work > 2008;
SELECT "conductor".* FROM "conductor" WHERE "conductor".Year_of_Work > 2008 AND "conductor".Year_of_Work < 2010 AND "conductor".Nationality = 'American' AND "conductor".Name = 'John Williams'
SELECT "Record_Company" ,COUNT("Orchestra_ID") FROM "orchestra" GROUP BY "Record_Company" ORDER BY "Record_Company"
SELECT "Record_Company" ,COUNT("Orchestra_ID") FROM "orchestra" GROUP BY "Record_Company" ORDER BY "Record_Company"
SELECT * FROM orchestra ORDER BY COUNT(*) DESC;
SELECT "Orchestra" ,COUNT(*) FROM "orchestra" GROUP BY "Orchestra" ORDER BY COUNT(*) DESC
SELECT "Record_Company" FROM "orchestra" GROUP BY "Record_Company" HAVING COUNT(*) = ( SELECT COUNT(*) FROM "orchestra" GROUP BY "Record_Company" ) ORDER BY COUNT(*) DESC
SELECT "Record_Company" FROM "orchestra" GROUP BY "Record_Company" HAVING COUNT(*) = ( SELECT COUNT(*) FROM "orchestra" )
SELECT DISTINCT "Orchestra_ID" FROM "orchestra" WHERE "Orchestra_ID" IS NULL;
SELECT * FROM orchestra WHERE NOT EXISTS (SELECT * FROM performance WHERE orchestra_id = orchestra_id)
SELECT * FROM orchestra WHERE Year_of_Founded < 2003 AND Year_of_Founded > 2003 AND Record_Company IN ( SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 AND Year_of_Founded > 2003 )
SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 AND Record_Company IN ( SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003 )
SELECT * FROM orchestra WHERE Record_Company = 'CD' OR Record_Company = 'DVD';
SELECT COUNT(DISTINCT `orchestra`.`Orchestra_ID`) FROM `orchestra` WHERE `orchestra`.`Record_Company` = 'CD' OR `orchestra`.`Record_Company` = 'DVD'
SELECT "Orchestra_ID", "Year_of_Founded" FROM "orchestra" WHERE "Year_of_Founded" > 1900 AND "Year_of_Founded" < 2000 GROUP BY "Orchestra_ID" HAVING COUNT("Year_of_Founded") > 1
SELECT "Orchestra_ID", "Year_of_Founded" FROM "orchestra" WHERE "Year_of_Founded" > 1 AND "Year_of_Founded" < 2000 AND "Year_of_Founded" < 2000 AND "Year_of_Founded" < 2000 AND "Year_of_Founded" < 2000 AND "Year_of_Founded" < 2000 AND "Year_of_Founded" < 2000 AND "Year_of_Founded" < 2000 AND "Year_of_Founded" < 2000 AND "Year_of_Founded" < 2000 AND "Year_of_Founded" < 2000 AND "Year_of_Founded" < 2000 AND "Year_of_Founded" < 2000 AND "Year_of_Founded" < 2
SELECT COUNT(*) FROM Highschooler;
SELECT COUNT(*) FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT * FROM Highschooler;
SELECT * FROM Highschooler;
SELECT * FROM Highschooler WHERE ID = 1;
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT name FROM Highschooler WHERE grade = 10;
SELECT * FROM Highschooler WHERE grade = 10;
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT * FROM Highschooler WHERE ID = 1;
SELECT COUNT(ID) FROM Highschooler WHERE grade = 9 OR grade = 10;
SELECT COUNT(ID) FROM Highschooler WHERE grade = 9 OR grade = 10;
SELECT * FROM Highschooler;
SELECT * FROM Highschooler;
SELECT grade, COUNT(*) AS total FROM Highschooler GROUP BY grade;
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4
SELECT ID, COUNT(ID) AS friends FROM Friend GROUP BY ID;  SELECT ID, COUNT(ID) AS friends FROM Friend GROUP BY ID;  SELECT ID, COUNT(ID) AS friends FROM Friend GROUP BY ID;  SELECT ID, COUNT(ID) AS friends FROM Friend GROUP BY ID;  SELECT ID, COUNT(ID) AS friends FROM Friend GROUP BY ID;  SELECT ID, COUNT(ID) AS friends FROM Friend GROUP BY ID;  SELECT ID, COUNT(ID) AS friends FROM Friend GROUP BY ID;  SELECT ID, COUNT(ID) AS friends FROM Friend GROUP BY ID;  SELECT ID, COUNT(ID) AS friends FROM Friend GROUP BY ID;  SELECT ID, COUNT(ID) AS friends FROM Friend GROUP BY ID;  SELECT ID, COUNT(ID) AS friends FROM Friend GROUP BY ID;  SELECT ID, COUNT(ID) AS friends FROM Friend GROUP BY ID;  SELECT ID, COUNT(ID) AS friends FROM Friend GROUP BY ID;  SELECT ID, COUNT(ID) AS friends FROM Friend GROUP BY ID;  SELECT ID, COUNT(ID) AS friends FROM Friend GROUP BY ID;
SELECT * FROM Friend;  SELECT * FROM Likes;
SELECT name, count(friend_id) as friends FROM Friend GROUP BY name ORDER BY friends DESC
SELECT * FROM Highschooler; SELECT * FROM Friend; SELECT * FROM Likes;
SELECT * FROM Friend;  SELECT * FROM Likes;  SELECT * FROM Highschooler;  SELECT * FROM Likes;  SELECT * FROM Friend;  SELECT * FROM Highschooler;  SELECT * FROM Friend;  SELECT * FROM Likes;  SELECT * FROM Highschooler;  SELECT * FROM Friend;  SELECT * FROM Likes;  SELECT * FROM Highschooler;  SELECT * FROM Friend;  SELECT * FROM Likes;  SELECT * FROM Highschooler;  SELECT * FROM Friend;  SELECT * FROM Likes;  SELECT * FROM Highschooler;  SELECT * FROM Friend;  SELECT * FROM Likes;  SELECT * FROM Highschooler;  SELECT * FROM Friend;  SELECT * FROM Likes;  SELECT * FROM Highschooler;  SELECT * FROM Friend;  SELECT * FROM Likes;  SELECT * FROM Highschooler;  SELECT * FROM Friend;  SELECT * FROM Likes;  SELECT * FROM Highschooler;  SELECT * FROM Friend;  SELECT * FROM Likes;
SELECT name FROM Friend WHERE student_id = (SELECT MAX(student_id) FROM Friend);
SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id IN (SELECT liked_id FROM Likes WHERE liked_id IN (SELECT ID FROM Highschooler)))
SELECT * FROM Friend WHERE student_id IN (SELECT student_id FROM Likes WHERE liked_id IN (SELECT ID FROM Highschooler))
SELECT name FROM Friend WHERE student_id = 1;
SELECT name FROM Friend WHERE student_id = 1;
SELECT COUNT(friend_id) FROM Friend WHERE student_id = 1;
SELECT COUNT(friend_id) AS friends FROM Friend WHERE student_id = 1;
SELECT * FROM Friend WHERE student_id NOT IN (SELECT student_id FROM Friend)
SELECT * FROM Friend WHERE student_id NOT IN (SELECT student_id FROM Likes)
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT * FROM Friend WHERE student_id NOT IN (SELECT student_id FROM Likes)
SELECT * FROM Highschooler WHERE EXISTS (SELECT * FROM Friend WHERE Highschooler.ID = Friend.student_id) AND EXISTS (SELECT * FROM Likes WHERE Highschooler.ID = Likes.liked_id)
SELECT * FROM Likes WHERE student_id IN (SELECT student_id FROM Friend) AND liked_id IN (SELECT student_id FROM Friend)
SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes)
SELECT * FROM Highschooler WHERE EXISTS (SELECT * FROM Friend WHERE Highschooler.ID = Friend.student_id) AND EXISTS (SELECT * FROM Likes WHERE Highschooler.ID = Likes.student_id)
SELECT student_id, COUNT(liked_id) AS likes FROM Likes GROUP BY student_id ORDER BY likes DESC
SELECT * FROM Likes;
SELECT name, COUNT(liked_id) AS likes FROM Likes GROUP BY name;
SELECT * FROM Likes;  SELECT * FROM Friend;  SELECT * FROM Highschooler;  SELECT * FROM Likes;  SELECT * FROM Friend;  SELECT * FROM Highschooler;  SELECT * FROM Likes;  SELECT * FROM Friend;  SELECT * FROM Highschooler;  SELECT * FROM Likes;  SELECT * FROM Friend;  SELECT * FROM Highschooler;  SELECT * FROM Likes;  SELECT * FROM Friend;  SELECT * FROM Highschooler;  SELECT * FROM Likes;  SELECT * FROM Friend;  SELECT * FROM Highschooler;  SELECT * FROM Likes;  SELECT * FROM Friend;  SELECT * FROM Highschooler;  SELECT * FROM Likes;  SELECT * FROM Friend;  SELECT * FROM Highschooler;  SELECT * FROM Likes;  SELECT * FROM Friend;  SELECT * FROM Highschooler;  SELECT * FROM Likes;  SELECT * FROM Friend;  SELECT * FROM Highschooler;  SELECT * FROM Likes;  SELECT * FROM Friend;
error
error
SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes WHERE liked_id IN (SELECT ID FROM Highschooler))
SELECT * FROM Likes WHERE liked_id IN (SELECT ID FROM Highschooler WHERE ID IN (SELECT ID FROM Likes WHERE liked_id IN (SELECT ID FROM Highschooler WHERE ID IN (SELECT ID FROM Likes WHERE liked_id IN (SELECT ID FROM Highschooler WHERE ID IN (SELECT ID FROM Likes WHERE liked_id IN (SELECT ID FROM Highschooler WHERE ID IN (SELECT ID FROM Likes WHERE liked_id IN (SELECT ID FROM Highschooler WHERE ID IN (SELECT ID FROM Likes WHERE liked_id IN (SELECT ID FROM Highschooler WHERE ID IN (SELECT ID FROM Likes WHERE liked_id IN (SELECT ID FROM Highschooler WHERE ID IN (SELECT ID FROM Likes WHERE liked_id IN (SELECT ID FROM Highschooler WHERE ID IN (SELECT ID FROM Likes WHERE liked_id IN (SELECT ID FROM Highschooler WHERE ID IN (SELECT ID FROM Likes WHERE liked_id IN (SELECT ID FROM Highschooler WHERE ID IN (SELECT ID FROM Likes WHERE liked_id IN (SELECT ID FROM Highschooler WHERE ID IN (SELECT ID FROM Likes WHERE liked_id IN (SELECT ID FROM Highschooler WHERE ID IN (SELECT ID
SELECT name, grade FROM Highschooler WHERE grade > 5 AND friend_count > 2;
SELECT * FROM Highschooler WHERE grade > 5 AND friend_count > 2;
SELECT count(liked_id) as likes FROM Likes WHERE liked_id = 1;
SELECT COUNT(liked_id) FROM Likes WHERE student_id = 1;
SELECT AVG(grade) FROM Friend WHERE EXISTS (SELECT * FROM Likes WHERE Likes.liked_id = Friend.student_id)
SELECT AVG(grade) FROM Friend;
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT * FROM Highschooler WHERE grade < 10;
SELECT * FROM Owners, Professionals WHERE Owners.owner_id = Professionals.professional_id;
SELECT * FROM Owners, Professionals WHERE Owners.owner_id = Professionals.professional_id;
SELECT AVG(age) FROM Dogs WHERE treatment_id IS NOT NULL;
SELECT AVG(age) FROM Dogs WHERE treatment_id IS NOT NULL;
SELECT * FROM `Professionals` WHERE `state` = 'IN' OR `treatment_count` > 2;
SELECT * FROM `Professionals` WHERE `state` = 'IN' OR `treatment_count` > 2;
SELECT Dogs.name, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Treatments.cost_of_treatment FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.cost_of_treatment < 1000 ORDER BY Dogs.name
SELECT Dogs.name, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Treatments.cost_of_treatment, Treatments.date_of_treatment, Treatments.treatment_type_code, Treatments.professional_id FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.cost_of_treatment < 1000 ORDER BY Dogs.name
SELECT * FROM `Professionals` WHERE `first_name` NOT IN (SELECT `first_name` FROM `Dogs`); SELECT * FROM `Owners` WHERE `first_name` NOT IN (SELECT `first_name` FROM `Dogs`);
SELECT DISTINCT first_name FROM `Professionals` WHERE first_name NOT IN (SELECT first_name FROM `Dogs`);  SELECT DISTINCT first_name FROM `Owners` WHERE first_name NOT IN (SELECT first_name FROM `Dogs`);
SELECT * FROM `Professionals` WHERE `professional_id` NOT IN (SELECT `professional_id` FROM `Treatments` WHERE `dog_id` IS NOT NULL)
SELECT `professional_id`, `role_code`, `email_address` FROM `Professionals` WHERE `professional_id` NOT IN (SELECT `professional_id` FROM `Treatments` WHERE `dog_id` IS NOT NULL)
SELECT owner_id, first_name, last_name FROM Owners GROUP BY owner_id ORDER BY owner_id
SELECT owner_id, first_name, last_name FROM Owners GROUP BY owner_id ORDER BY COUNT(*) DESC
SELECT * FROM `Professionals` WHERE `treatment_id` > 0
SELECT * FROM `Professionals` WHERE `treatment_id` > 0
SELECT COUNT(dog_id) AS `dog_count` FROM `Dogs` WHERE `breed_code` = '1'
SELECT breed_name FROM `Breeds` WHERE breed_code = (SELECT MAX(breed_code) FROM `Breeds` GROUP BY breed_code)
SELECT owner_id, last_name FROM `Dogs` INNER JOIN `Treatments` ON `Dogs`.`owner_id` = `Treatments`.`dog_id` GROUP BY owner_id ORDER BY COUNT(*) DESC
SELECT owner_id, last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Treatments GROUP BY owner_id ORDER BY SUM(cost_of_treatment) DESC LIMIT 1)
SELECT * FROM `Treatments` WHERE `cost_of_treatment` = (SELECT MIN(cost_of_treatment) FROM `Treatments`);
SELECT * FROM Treatments WHERE Treatment_Type_Code = 'Bath' ORDER BY Cost_Of_Treatment ASC
SELECT owner_id, zip_code FROM `Dogs` GROUP BY owner_id, zip_code ORDER BY SUM(cost_of_treatment) DESC
SELECT owner_id, zip_code FROM ( SELECT owner_id, SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY owner_id ) AS t WHERE total_cost > (SELECT SUM(cost_of_treatment) FROM Treatments)
SELECT * FROM `Professionals` WHERE `treatment_type_code` IN ('Dog Grooming', 'Dog Training', 'Dog Walking', 'Dog Boarding')
SELECT * FROM `Professionals` WHERE `professional_id` IN (SELECT `professional_id` FROM `Treatments` WHERE `treatment_type_code` IN ('Dog_Bath', 'Dog_Grooming', 'Dog_Training'))
SELECT first_name, last_name, COUNT(treatment_id) AS total_treatments, AVG(cost_of_treatment) AS average_cost FROM `Treatments` WHERE treatment_type_code = 'Bath' AND cost_of_treatment < AVG(cost_of_treatment) GROUP BY first_name, last_name ORDER BY total_treatments DESC
SELECT first_name, last_name FROM `Professionals` WHERE `treatment_cost` < (SELECT AVG(`cost_of_treatment`) FROM `Treatments` WHERE `dog_id` = `dog_id` )
SELECT `treatment_id`, `professional_id`, `treatment_type_code`, `date_of_treatment` FROM `Treatments` ORDER BY `treatment_id`
SELECT * FROM `Treatments` WHERE `treatment_type_code` = 'Bath'
SELECT `treatment_type_description` , `cost_of_treatment` FROM `Treatments` WHERE `treatment_type_code` = 'Dog_Bath'
INSERT INTO `Treatments` (`treatment_id`, `dog_id`, `professional_id`, `treatment_type_code`, `date_of_treatment`, `cost_of_treatment`) VALUES (1, 1, 1, 'Dog Bath', '2015-01-01', 10.00), (2, 1, 1, 'Dog Grooming', '2015-01-01', 20.00), (3, 1, 1, 'Dog Nail Trim', '2015-01-01', 10.00), (4, 1, 1, 'Dog Vaccination', '2015-01-01', 10.00), (5, 1, 1, 'Dog Veterinary Exam', '2015-01-01', 10.00), (6, 1, 1, 'Dog Veterinary Exam',
SELECT owner_id, first_name, last_name, size_code, size_description FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id INNER JOIN Sizes ON Dogs.size_code = Sizes.size_code WHERE owner_id IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48
SELECT owner_id, first_name, last_name, size_code FROM Owners;
SELECT DISTINCT owner_id, name FROM Dogs;
SELECT owner_id, first_name, name FROM Owners, Dogs WHERE owner_id = Dogs.owner_id;
SELECT DISTINCT `dog_id` FROM `Dogs` WHERE `breed_code` = 'Rare Breed'  SELECT `dog_id`, `date_of_treatment` FROM `Treatments` WHERE `dog_id` = '1'
SELECT Dogs.dog_id, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Treatments.date_of_treatment, Treatments.cost_of_treatment, Treatments.professional_id FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id INNER JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Dogs.breed_code = 'Rare' ORDER BY Dogs.name
SELECT Dogs.owner_id, Dogs.name, Owners.first_name FROM Dogs INNER JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Owners.state = 'VA' ORDER BY Dogs.name
SELECT owner_id, first_name FROM Owners WHERE state = 'VA';  SELECT dog_id, name FROM Dogs WHERE owner_id = (SELECT owner_id FROM Owners WHERE state = 'VA');
SELECT DISTINCT `dog_id`, `date_of_treatment` FROM `Treatments` WHERE `date_of_treatment` >= '2015-01-01' AND `date_of_treatment` <= '2015-01-31'
SELECT DISTINCT dog_id, date_of_arrival, date_of_departure FROM dogs WHERE date_of_arrival > '2015-01-01' AND date_of_departure < '2015-01-01' AND date_of_arrival < '2015-01-01' AND date_of_departure > '2015-01-01' AND date_of_arrival > '2015-01-01' AND date_of_departure < '2015-01-01' AND date_of_arrival < '2015-01-01' AND date_of_departure > '2015-01-01' AND date_of_arrival > '2015-01-01' AND date_of_departure < '2015-01-01' AND date_of_arrival < '2015-
SELECT owner_last_name FROM `Owners` WHERE `owner_id` = (SELECT `owner_id` FROM `Dogs` WHERE `dog_id` = (SELECT `dog_id` FROM `Dogs` WHERE `age` = (SELECT `age` FROM `Dogs` WHERE `dog_id` = (SELECT `dog_id` FROM `Dogs` WHERE `date_of_birth` = (SELECT `date_of_birth` FROM `Dogs` WHERE `dog_id` = (SELECT `dog_id` FROM `Dogs` WHERE `abandoned_yn` = 'N')))))
SELECT owner_id, last_name FROM Dogs WHERE age = (SELECT MIN(age) FROM Dogs)
SELECT * FROM `Professionals` WHERE `state` = 'HI' OR `state` = 'WI';
SELECT * FROM `Professionals` WHERE `state` = 'HI' OR `state` = 'WI';
SELECT * FROM `Dogs` WHERE `date_arrived` > '2015-01-01' AND `date_arrived` < '2015-01-02'
SELECT * FROM `Dogs` WHERE `date_arrived` IS NOT NULL AND `date_departed` IS NULL;
SELECT COUNT(dog_id) AS dog_count FROM `Dogs`
SELECT COUNT(dog_id) FROM `Treatments`
SELECT COUNT(DISTINCT `professional_id`) AS `professionals_who_have_treated_dogs` FROM `Treatments` WHERE `professional_id` IS NOT NULL
SELECT COUNT(DISTINCT `professional_id`) AS `professionals_who_have_ever_treated_dogs` FROM `Professionals` INNER JOIN `Treatments` ON `Professionals`.`professional_id` = `Treatments`.`professional_id` WHERE `Treatments`.`dog_id` IS NOT NULL
SELECT * FROM `Professionals` WHERE `city` LIKE 'West%'
SELECT * FROM `Professionals` WHERE `city` LIKE 'West%'
SELECT owner_id, first_name, last_name, email_address FROM Owners WHERE state LIKE 'North%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE 'North%'
SELECT COUNT(*) FROM `Dogs` WHERE `age` < AVG(`age`)
SELECT COUNT(dog_id) AS dog_count, AVG(age) AS average_age FROM Dogs WHERE age < AVG(age)
SELECT TOP 1 * FROM `Treatments` WHERE `treatment_type_code` = 'Dental' ORDER BY `date_of_treatment` DESC
SELECT * FROM `Treatments` WHERE `date_of_treatment` = (SELECT MAX(`date_of_treatment`) FROM `Treatments`);
SELECT COUNT(*) FROM `Dogs` WHERE `treatment_id` IS NULL;
SELECT COUNT(*) FROM `Dogs` WHERE `treatment_id` IS NULL;
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs);
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs);
SELECT COUNT(*) FROM `Professionals` WHERE `professional_id` NOT IN (SELECT `professional_id` FROM `Treatments` WHERE `dog_id` IS NOT NULL)
SELECT COUNT(*) FROM `Professionals` WHERE `treatment_id` IS NULL;
SELECT Dogs.name, Dogs.age, Dogs.weight, COUNT(Dogs.dog_id) AS abandoned_dogs FROM Dogs WHERE abandoned_yn = '1' GROUP BY Dogs.name, Dogs.age, Dogs.weight ORDER BY Dogs.name, Dogs.age, Dogs.weight
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1
SELECT AVG(age) FROM Dogs;
SELECT AVG(age) FROM Dogs;
SELECT * FROM `Dogs` WHERE `date_of_birth` = (SELECT MAX(date_of_birth) FROM `Dogs`);
SELECT * FROM `Dogs` WHERE `date_of_birth` = (SELECT MAX( `date_of_birth` ) FROM `Dogs` );
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, charge_amount FROM Charges;
SELECT charge_type, SUM(charge_amount) AS total_cost FROM Charges GROUP BY charge_type ORDER BY total_cost DESC
SELECT charge_type, charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1;
SELECT * FROM `Professionals`
SELECT * FROM `Professionals`
SELECT * FROM Breeds;  SELECT * FROM Sizes;  SELECT * FROM Treatment_Types;  SELECT * FROM Owners;  SELECT * FROM Professionals;  SELECT * FROM Dogs;  SELECT * FROM Treatments; \end{code}  Comment: I'm not sure what you're asking.  Are you asking how to get the combinations of breed and size?  Or are you asking how to get the combinations of breed, size, and treatment?  Comment: I'm asking how to get the combinations of breed and size.  Comment: I'm not sure what you mean by "combinations".  Do you mean all possible combinations?  Or do you mean all possible combinations that are valid?  Comment: I mean all possible combinations.  Comment: I'm not sure what you mean by "all possible combinations".  Do you mean all possible combinations of breed and size?  Or do you mean all possible combinations of breed, size, and treatment?  Comment: I mean all possible combinations of breed and size.  Comment: I'm not sure what
SELECT distinct breed_name, size_description FROM Dogs GROUP BY breed_name, size_description
SELECT first_name, treatment_type_description FROM `Treatments` WHERE `professional_id` = 1 ORDER BY `treatment_type_description`
SELECT first_name, treatment_type_description FROM `Treatments` WHERE `professional_id` = 1;  SELECT first_name, treatment_type_description FROM `Treatments` WHERE `professional_id` = 2;  SELECT first_name, treatment_type_description FROM `Treatments` WHERE `professional_id` = 3;  SELECT first_name, treatment_type_description FROM `Treatments` WHERE `professional_id` = 4;  SELECT first_name, treatment_type_description FROM `Treatments` WHERE `professional_id` = 5;  SELECT first_name, treatment_type_description FROM `Treatments` WHERE `professional_id` = 6;  SELECT first_name, treatment_type_description FROM `Treatments` WHERE `professional_id` = 7;  SELECT first_name, treatment_type_description FROM `Treatments` WHERE `professional_id` = 8;  SELECT first_name, treatment_type_description FROM `Treatments
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT "Singer_ID", "Name", "Net_Worth_Millions" FROM "singer" ORDER BY "Net_Worth_Millions" ASC
SELECT "Singer_ID", "Name", "Net_Worth_Millions" FROM "singer" ORDER BY "Net_Worth_Millions" ASC
SELECT "Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship" FROM "singer" WHERE "Birth_Year" > 1950 AND "Citizenship" = 'US' ORDER BY "Birth_Year" DESC
SELECT "Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship" FROM "singer" WHERE "Birth_Year" > 1950 AND "Citizenship" != 'United States' ORDER BY "Birth_Year" DESC
SELECT "Singer_ID" FROM "singer" WHERE "Citizenship" != "France"
SELECT * FROM singer WHERE Citizenship != 'French'
SELECT "Singer_ID" FROM "singer" WHERE "Birth_Year" BETWEEN 1948 AND 1949;
SELECT "Singer_ID" FROM "singer" WHERE "Birth_Year" BETWEEN 1948 AND 1949;
SELECT "Singer_ID", "Name", "Net_Worth_Millions" FROM "singer" WHERE "Net_Worth_Millions" > (SELECT MAX("Net_Worth_Millions") FROM "singer") ORDER BY "Net_Worth_Millions" DESC
SELECT * FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);
SELECT "Singer_ID", "Name", "Citizenship" FROM "singer" GROUP BY "Singer_ID", "Name", "Citizenship" ORDER BY "Singer_ID", "Name", "Citizenship"
SELECT COUNT(*) AS "Count" FROM singer WHERE "Citizenship" = 'United States'  SELECT COUNT(*) AS "Count" FROM singer WHERE "Citizenship" = 'Canada'  SELECT COUNT(*) AS "Count" FROM singer WHERE "Citizenship" = 'United Kingdom'  SELECT COUNT(*) AS "Count" FROM singer WHERE "Citizenship" = 'Australia'  SELECT COUNT(*) AS "Count" FROM singer WHERE "Citizenship" = 'New Zealand'  SELECT COUNT(*) AS "Count" FROM singer WHERE "Citizenship" = 'France'  SELECT COUNT(*) AS "Count" FROM singer WHERE "Citizenship" = 'Germany'  SELECT COUNT(*) AS "Count" FROM singer WHERE "Citizenship" = 'Italy'  SELECT COUNT(*) AS "Count" FROM singer WHERE "Citizenship" = 'Spain'  SELECT COUNT(*) AS "Count" FROM singer WHERE "Citizenship"
SELECT COUNT(DISTINCT "Singer_ID") FROM "singer" GROUP BY "Singer_ID" HAVING COUNT(DISTINCT "Singer_ID") > 1
error
SELECT "Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship", MAX("Net_Worth_Millions") FROM "singer" GROUP BY "Singer_ID", "Citizenship" ORDER BY "Net_Worth_Millions" DESC \end{code}  Comment: I'm not sure what you're asking.  Can you clarify?  Comment: I'm not sure what you're asking.  Can you clarify?  Comment: I'm not sure what you're asking.  Can you clarify?  Comment: I'm not sure what you're asking.  Can you clarify?  Comment: I'm not sure what you're asking.  Can you clarify?  Comment: I'm not sure what you're asking.  Can you clarify?  Comment: I'm not sure what you're asking.  Can you clarify?  Comment: I'm not sure what you're asking.  Can you clarify?  Comment: I'
SELECT "Singer_ID", MAX("Net_Worth_Millions") FROM "singer" GROUP BY "Citizenship" \end{code}  Comment: I'm not sure what you mean by "maximum net worth".  Do you mean the maximum net worth for each citizen?  Comment: @JonathanLeffler Yes, that's what I mean.  Comment: @JonathanLeffler I've updated the question to make it more clear.  Comment: @JonathanLeffler I've updated the question to make it more clear.  Comment: @JonathanLeffler I've updated the question to make it more clear.  Comment: @JonathanLeffler I've updated the question to make it more clear.  Comment: @JonathanLeffler I've updated the question to make it more clear.  Comment: @JonathanLeffler I've updated the question to make it more clear.  Comment: @JonathanLeffler I've updated the question to make it more clear.
SELECT "Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position" FROM "song" ORDER BY "Song_ID"
SELECT "Song_ID", "Title", "Singer_ID" FROM "song"
SELECT DISTINCT "Singer_ID" FROM "song" WHERE "Song_ID" > 300000;
SELECT * FROM song WHERE Sales > 300000 AND Singer_ID NOT IN (SELECT Singer_ID FROM singer WHERE Net_Worth_Millions > 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
SELECT "Singer_ID" FROM "song" WHERE "Singer_ID" > 1;
SELECT * FROM singer WHERE EXISTS (SELECT * FROM song WHERE song.Singer_ID = singer.Singer_ID);
SELECT "Singer_ID", "Name", SUM("Sales") FROM "song" GROUP BY "Singer_ID" ORDER BY "Singer_ID"
SELECT "Singer_ID", SUM("Sales") FROM "song" GROUP BY "Singer_ID" ORDER BY "Singer_ID" \end{code}  Comment: I'm not sure what you're asking.  Do you want to know how to write a query that will return the total sales for each singer?  Comment: Yes, I want to know how to write a query that will return the total sales for each singer.  Comment: I've added an answer.  Please let me know if you have any questions.  Answer: \begin{code} SELECT "Singer_ID", SUM("Sales") FROM "song" GROUP BY "Singer_ID" ORDER BY "Singer_ID" \end{code}  Comment: I'm getting an error: "SQL Error [42S22]: [42000] [Microsoft][ODBC SQL Server Driver][SQL Server]Invalid column name 'Singer_ID'."  Comment: @user3783243 - I'm not sure what you're using to run the query.
SELECT "Singer_ID" FROM "singer" WHERE "Singer_ID" NOT IN (SELECT "Singer_ID" FROM "song");
SELECT "Singer_ID" FROM "song" WHERE "Song_ID" IS NULL;
SELECT * FROM singer WHERE Birth_Year < 1945 AND Birth_Year > 1955;
SELECT DISTINCT "Singer_ID" FROM "singer" WHERE "Birth_Year" < 1945 AND "Birth_Year" > 1955
SELECT COUNT(*) FROM `Other_Available_Features`;
SELECT `feature_type_name` FROM `Ref_Feature_Types` WHERE `feature_type_code` = 'AirCon'
SELECT * FROM `Ref_Property_Types` WHERE `property_type_code` = 'Apartment'
SELECT * FROM Properties WHERE room_count > 1;
